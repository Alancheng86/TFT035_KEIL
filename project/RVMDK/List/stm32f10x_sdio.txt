; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_sdio.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_sdio.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I..\..\project -I..\..\library\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=517 -DVECT_TAB_FLASH --omf_browse=.\obj\stm32f10x_sdio.crf ..\..\library\src\stm32f10x_sdio.c]
                          THUMB

                          AREA ||i.SDIO_CEATAITCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CEATAITCmd PROC
;;;619    *******************************************************************************/
;;;620    void SDIO_CEATAITCmd(FunctionalState NewState)
000000  2101              MOVS     r1,#1
;;;621    { 
;;;622      /* Check the parameters */
;;;623      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;624      
;;;625      *(vu32 *) CMD_NIEN_BB = (u32)((~((u32)NewState)) & ((u32)0x1));
000002  ea210000          BIC      r0,r1,r0
000006  4902              LDR      r1,|L1.16|
000008  f8c101b4          STR      r0,[r1,#0x1b4]
;;;626    }
00000c  4770              BX       lr
;;;627    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x42300000

                          AREA ||i.SDIO_ClearFlag||, CODE, READONLY, ALIGN=2

                  SDIO_ClearFlag PROC
;;;729    *******************************************************************************/
;;;730    void SDIO_ClearFlag(u32 SDIO_FLAG)
000000  4901              LDR      r1,|L2.8|
;;;731    { 
;;;732      /* Check the parameters */
;;;733      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;734       
;;;735      SDIO->ICR = SDIO_FLAG;
000002  6388              STR      r0,[r1,#0x38]
;;;736    }
000004  4770              BX       lr
;;;737    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  SDIO_ClearITPendingBit PROC
;;;823    *******************************************************************************/
;;;824    void SDIO_ClearITPendingBit(u32 SDIO_IT)
000000  4901              LDR      r1,|L3.8|
;;;825    { 
;;;826      /* Check the parameters */
;;;827      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;828       
;;;829      SDIO->ICR = SDIO_IT;
000002  6388              STR      r0,[r1,#0x38]
;;;830    }
000004  4770              BX       lr
;;;831    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_ClockCmd||, CODE, READONLY, ALIGN=2

                  SDIO_ClockCmd PROC
;;;186    *******************************************************************************/
;;;187    void SDIO_ClockCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L4.8|
;;;188    {
;;;189      /* Check the parameters */
;;;190      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;191      
;;;192      *(vu32 *) CLKCR_CLKEN_BB = (u32)NewState;
000002  f8c100a0          STR      r0,[r1,#0xa0]
;;;193    }
000006  4770              BX       lr
;;;194    
                          ENDP

                  |L4.8|
                          DCD      0x42300000

                          AREA ||i.SDIO_CmdStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_CmdStructInit PROC
;;;356    *******************************************************************************/
;;;357    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
000000  2100              MOVS     r1,#0
;;;358    {
;;;359      /* SDIO_CmdInitStruct members default value */
;;;360      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
;;;361      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;362      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
000004  6041              STR      r1,[r0,#4]
;;;363      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
000006  6081              STR      r1,[r0,#8]
;;;364      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
000008  60c1              STR      r1,[r0,#0xc]
00000a  6101              STR      r1,[r0,#0x10]
;;;365    }
00000c  4770              BX       lr
;;;366    
                          ENDP


                          AREA ||i.SDIO_CommandCompletionCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CommandCompletionCmd PROC
;;;603    *******************************************************************************/
;;;604    void SDIO_CommandCompletionCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;605    { 
;;;606      /* Check the parameters */
;;;607      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;608      
;;;609      *(vu32 *) CMD_ENCMDCOMPL_BB = (u32)NewState;
000002  f8c101b0          STR      r0,[r1,#0x1b0]
;;;610    }
000006  4770              BX       lr
;;;611    
                          ENDP

                  |L6.8|
                          DCD      0x42300000

                          AREA ||i.SDIO_DMACmd||, CODE, READONLY, ALIGN=2

                  SDIO_DMACmd PROC
;;;299    *******************************************************************************/
;;;300    void SDIO_DMACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;301    {
;;;302      /* Check the parameters */
;;;303      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;304      
;;;305      *(vu32 *) DCTRL_DMAEN_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;306    }
000004  4770              BX       lr
;;;307    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x4230058c

                          AREA ||i.SDIO_DataConfig||, CODE, READONLY, ALIGN=2

                  SDIO_DataConfig PROC
;;;409    *******************************************************************************/
;;;410    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  4909              LDR      r1,|L8.40|
;;;411    {
;;;412      u32 tmpreg = 0;
;;;413      
;;;414      /* Check the parameters */
;;;415      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;416      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;417      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;418      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;419      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;420    
;;;421    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;422      /* Set the SDIO Data TimeOut value */
;;;423      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
000002  6802              LDR      r2,[r0,#0]
000004  624a              STR      r2,[r1,#0x24]
;;;424        
;;;425    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;426      /* Set the SDIO DataLength value */
;;;427      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
000006  6842              LDR      r2,[r0,#4]
000008  628a              STR      r2,[r1,#0x28]
;;;428      
;;;429    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;430      /* Get the SDIO DCTRL value */
;;;431      tmpreg = SDIO->DCTRL;
00000a  6aca              LDR      r2,[r1,#0x2c]
;;;432    
;;;433      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;434      tmpreg &= DCTRL_CLEAR_MASK;
00000c  e9d03c02          LDRD     r3,r12,[r0,#8]
;;;435      /* Set DEN bit according to SDIO_DPSM value */
;;;436      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;437      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;438      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;439      tmpreg |= (u32)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
000010  ea43030c          ORR      r3,r3,r12
000014  e9d0c004          LDRD     r12,r0,[r0,#0x10]
000018  ea4c0000          ORR      r0,r12,r0
00001c  f02202f7          BIC      r2,r2,#0xf7           ;434
000020  4318              ORRS     r0,r0,r3
000022  4310              ORRS     r0,r0,r2
;;;440               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;441      
;;;442      /* Write to SDIO DCTRL */
;;;443      SDIO->DCTRL = tmpreg;
000024  62c8              STR      r0,[r1,#0x2c]
;;;444    }
000026  4770              BX       lr
;;;445    
                          ENDP

                  |L8.40|
                          DCD      0x40018000

                          AREA ||i.SDIO_DataStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_DataStructInit PROC
;;;453    *******************************************************************************/
;;;454    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;455    {
;;;456      /* SDIO_DataInitStruct members default value */
;;;457      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
;;;458      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
;;;459      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
000008  6041              STR      r1,[r0,#4]
;;;460      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
00000a  6081              STR      r1,[r0,#8]
;;;461      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
00000c  60c1              STR      r1,[r0,#0xc]
;;;462      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
00000e  6101              STR      r1,[r0,#0x10]
000010  6141              STR      r1,[r0,#0x14]
;;;463    }
000012  4770              BX       lr
;;;464    
                          ENDP


                          AREA ||i.SDIO_DeInit||, CODE, READONLY, ALIGN=2

                  SDIO_DeInit PROC
;;;104    *******************************************************************************/
;;;105    void SDIO_DeInit(void)
000000  4806              LDR      r0,|L10.28|
;;;106    {
;;;107      SDIO->POWER = 0x00000000;
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]
;;;108      SDIO->CLKCR = 0x00000000;
000006  6041              STR      r1,[r0,#4]
;;;109      SDIO->ARG = 0x00000000;
000008  6081              STR      r1,[r0,#8]
;;;110      SDIO->CMD = 0x00000000;
00000a  60c1              STR      r1,[r0,#0xc]
;;;111      SDIO->DTIMER = 0x00000000;
00000c  6241              STR      r1,[r0,#0x24]
;;;112      SDIO->DLEN = 0x00000000;
00000e  6281              STR      r1,[r0,#0x28]
;;;113      SDIO->DCTRL = 0x00000000;
000010  62c1              STR      r1,[r0,#0x2c]
;;;114      SDIO->ICR = 0x00C007FF;
000012  4a03              LDR      r2,|L10.32|
000014  6382              STR      r2,[r0,#0x38]
;;;115      SDIO->MASK = 0x00000000;
000016  63c1              STR      r1,[r0,#0x3c]
;;;116    }
000018  4770              BX       lr
;;;117    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x40018000
                  |L10.32|
                          DCD      0x00c007ff

                          AREA ||i.SDIO_GetCommandResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetCommandResponse PROC
;;;374    *******************************************************************************/
;;;375    u8 SDIO_GetCommandResponse(void)
000000  4801              LDR      r0,|L11.8|
;;;376    {
;;;377      return (u8)(SDIO->RESPCMD);
000002  6900              LDR      r0,[r0,#0x10]
000004  b2c0              UXTB     r0,r0
;;;378    }
000006  4770              BX       lr
;;;379    
                          ENDP

                  |L11.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetDataCounter||, CODE, READONLY, ALIGN=2

                  SDIO_GetDataCounter PROC
;;;471    *******************************************************************************/
;;;472    u32 SDIO_GetDataCounter(void)
000000  4801              LDR      r0,|L12.8|
;;;473    { 
;;;474      return SDIO->DCOUNT;
000002  6b00              LDR      r0,[r0,#0x30]
;;;475    }
000004  4770              BX       lr
;;;476    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetFIFOCount||, CODE, READONLY, ALIGN=2

                  SDIO_GetFIFOCount PROC
;;;508    *******************************************************************************/
;;;509    u32 SDIO_GetFIFOCount(void)
000000  4801              LDR      r0,|L13.8|
;;;510    { 
;;;511      return SDIO->FIFOCNT;
000002  6c80              LDR      r0,[r0,#0x48]
;;;512    }
000004  4770              BX       lr
;;;513    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetFlagStatus PROC
;;;682    *******************************************************************************/
;;;683    FlagStatus SDIO_GetFlagStatus(u32 SDIO_FLAG)
000000  4a03              LDR      r2,|L14.16|
;;;684    { 
000002  4601              MOV      r1,r0
;;;685      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;686      
;;;687      /* Check the parameters */
;;;688      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;689      
;;;690      if ((SDIO->STA & SDIO_FLAG) != (u32)RESET)
000006  6b52              LDR      r2,[r2,#0x34]
000008  420a              TST      r2,r1
;;;691      {
;;;692        bitstatus = SET;
00000a  bf18              IT       NE
00000c  2001              MOVNE    r0,#1
;;;693      }
;;;694      else
;;;695      {
;;;696        bitstatus = RESET;
;;;697      }
;;;698      return bitstatus;
;;;699    }
00000e  4770              BX       lr
;;;700    
                          ENDP

                  |L14.16|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetITStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetITStatus PROC
;;;777    *******************************************************************************/
;;;778    ITStatus SDIO_GetITStatus(u32 SDIO_IT)
000000  4a03              LDR      r2,|L15.16|
;;;779    { 
000002  4601              MOV      r1,r0
;;;780      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;781      
;;;782      /* Check the parameters */
;;;783      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;784    
;;;785      if ((SDIO->STA & SDIO_IT) != (u32)RESET)  
000006  6b52              LDR      r2,[r2,#0x34]
000008  420a              TST      r2,r1
;;;786      {
;;;787        bitstatus = SET;
00000a  bf18              IT       NE
00000c  2001              MOVNE    r0,#1
;;;788      }
;;;789      else
;;;790      {
;;;791        bitstatus = RESET;
;;;792      }
;;;793      return bitstatus;
;;;794    }
00000e  4770              BX       lr
;;;795    
                          ENDP

                  |L15.16|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_GetPowerState PROC
;;;224    *******************************************************************************/
;;;225    u32 SDIO_GetPowerState(void)
000000  4802              LDR      r0,|L16.12|
;;;226    {
;;;227      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
000002  6800              LDR      r0,[r0,#0]
000004  f0000003          AND      r0,r0,#3
;;;228    }
000008  4770              BX       lr
;;;229    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetResponse||, CODE, READONLY, ALIGN=1

                  SDIO_GetResponse PROC
;;;391    *******************************************************************************/
;;;392    u32 SDIO_GetResponse(u32 SDIO_RESP)
000000  f1004080          ADD      r0,r0,#0x40000000
;;;393    {
000004  f50030c0          ADD      r0,r0,#0x18000
;;;394      /* Check the parameters */
;;;395      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;396      
;;;397      return (*(vu32 *)(SDIO_RESP_ADDR + SDIO_RESP)); 
000008  6940              LDR      r0,[r0,#0x14]
;;;398    }
00000a  4770              BX       lr
;;;399    
                          ENDP


                          AREA ||i.SDIO_ITConfig||, CODE, READONLY, ALIGN=2

                  SDIO_ITConfig PROC
;;;273    *******************************************************************************/
;;;274    void SDIO_ITConfig(u32 SDIO_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L18.20|
;;;275    {
;;;276      /* Check the parameters */
;;;277      assert_param(IS_SDIO_IT(SDIO_IT));
;;;278      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;279      
;;;280      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;281      {
;;;282        /* Enable the SDIO interrupts */
;;;283        SDIO->MASK |= SDIO_IT;
;;;284      }
;;;285      else
;;;286      {
;;;287        /* Disable the SDIO interrupts */
;;;288        SDIO->MASK &= ~SDIO_IT;
000004  6bd1              LDR      r1,[r2,#0x3c]
000006  bf14              ITE      NE                    ;283
000008  4308              ORRNE    r0,r0,r1              ;283
00000a  ea210000          BICEQ    r0,r1,r0
00000e  63d0              STR      r0,[r2,#0x3c]         ;283
;;;289      } 
;;;290    }
000010  4770              BX       lr
;;;291    
                          ENDP

000012  0000              DCW      0x0000
                  |L18.20|
                          DCD      0x40018000

                          AREA ||i.SDIO_Init||, CODE, READONLY, ALIGN=2

                  SDIO_Init PROC
;;;127    *******************************************************************************/
;;;128    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
000000  4a0e              LDR      r2,|L19.60|
;;;129    {
000002  b410              PUSH     {r4}
;;;130      u32 tmpreg = 0;
;;;131        
;;;132      /* Check the parameters */
;;;133      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;134      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;135      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;136      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;137      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;138       
;;;139    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;140      /* Get the SDIO CLKCR value */
;;;141      tmpreg = SDIO->CLKCR;
000004  6851              LDR      r1,[r2,#4]
;;;142      
;;;143      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;144      tmpreg &= CLKCR_CLEAR_MASK;
;;;145      
;;;146      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;147      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;148      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;149      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;150      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;151      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;152      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
000006  7803              LDRB     r3,[r0,#0]
000008  f8d0c00c          LDR      r12,[r0,#0xc]
00000c  6904              LDR      r4,[r0,#0x10]
00000e  ea43030c          ORR      r3,r3,r12
000012  f8d0c008          LDR      r12,[r0,#8]
000016  f02101ff          BIC      r1,r1,#0xff           ;144
00001a  ea4c0c04          ORR      r12,r12,r4
00001e  ea43030c          ORR      r3,r3,r12
000022  f8d0c004          LDR      r12,[r0,#4]
000026  6940              LDR      r0,[r0,#0x14]
000028  ea43030c          ORR      r3,r3,r12
00002c  f42141fc          BIC      r1,r1,#0x7e00         ;144
000030  4318              ORRS     r0,r0,r3
000032  4308              ORRS     r0,r0,r1
;;;153                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;154                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;155      
;;;156      /* Write to SDIO CLKCR */
;;;157      SDIO->CLKCR = tmpreg;             
000034  6050              STR      r0,[r2,#4]
;;;158    }
000036  bc10              POP      {r4}
000038  4770              BX       lr
;;;159    
                          ENDP

00003a  0000              DCW      0x0000
                  |L19.60|
                          DCD      0x40018000

                          AREA ||i.SDIO_ReadData||, CODE, READONLY, ALIGN=2

                  SDIO_ReadData PROC
;;;483    *******************************************************************************/
;;;484    u32 SDIO_ReadData(void)
000000  4801              LDR      r0,|L20.8|
;;;485    { 
;;;486      return SDIO->FIFO;
000002  f8d00080          LDR      r0,[r0,#0x80]
;;;487    }
000006  4770              BX       lr
;;;488    
                          ENDP

                  |L20.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_SendCEATACmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendCEATACmd PROC
;;;635    *******************************************************************************/
;;;636    void SDIO_SendCEATACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L21.8|
;;;637    { 
;;;638      /* Check the parameters */
;;;639      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;640      
;;;641      *(vu32 *) CMD_ATACMD_BB = (u32)NewState;
000002  f8c101b8          STR      r0,[r1,#0x1b8]
;;;642    }
000006  4770              BX       lr
;;;643    
                          ENDP

                  |L21.8|
                          DCD      0x42300000

                          AREA ||i.SDIO_SendCommand||, CODE, READONLY, ALIGN=2

                  SDIO_SendCommand PROC
;;;317    *******************************************************************************/
;;;318    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
000000  4a08              LDR      r2,|L22.36|
;;;319    {
;;;320      u32 tmpreg = 0;
;;;321      
;;;322      /* Check the parameters */
;;;323      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;324      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;325      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;326      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;327      
;;;328    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;329      /* Set the SDIO Argument value */
;;;330      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
000002  6801              LDR      r1,[r0,#0]
000004  6091              STR      r1,[r2,#8]
;;;331      
;;;332    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;333      /* Get the SDIO CMD value */
;;;334      tmpreg = SDIO->CMD;
000006  68d1              LDR      r1,[r2,#0xc]
;;;335    
;;;336      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;337      tmpreg &= CMD_CLEAR_MASK;
000008  e9d03c01          LDRD     r3,r12,[r0,#4]
;;;338      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;339      /* Set WAITRESP bits according to SDIO_Response value */
;;;340      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;341      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;342      tmpreg |= (u32)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
00000c  ea43030c          ORR      r3,r3,r12
000010  e9d0c003          LDRD     r12,r0,[r0,#0xc]
000014  ea4c0000          ORR      r0,r12,r0
000018  f36f010a          BFC      r1,#0,#11             ;337
00001c  4318              ORRS     r0,r0,r3
00001e  4308              ORRS     r0,r0,r1
;;;343               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;344      
;;;345      /* Write to SDIO CMD */
;;;346      SDIO->CMD = tmpreg;
000020  60d0              STR      r0,[r2,#0xc]
;;;347    }
000022  4770              BX       lr
;;;348    
                          ENDP

                  |L22.36|
                          DCD      0x40018000

                          AREA ||i.SDIO_SendSDIOSuspendCmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendSDIOSuspendCmd PROC
;;;587    *******************************************************************************/
;;;588    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L23.8|
;;;589    { 
;;;590      /* Check the parameters */
;;;591      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;592      
;;;593      *(vu32 *) CMD_SDIOSUSPEND_BB = (u32)NewState;
000002  f8c101ac          STR      r0,[r1,#0x1ac]
;;;594    }
000006  4770              BX       lr
;;;595    
                          ENDP

                  |L23.8|
                          DCD      0x42300000

                          AREA ||i.SDIO_SetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_SetPowerState PROC
;;;204    *******************************************************************************/
;;;205    void SDIO_SetPowerState(u32 SDIO_PowerState)
000000  4904              LDR      r1,|L24.20|
;;;206    {
;;;207      /* Check the parameters */
;;;208      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;209      
;;;210      SDIO->POWER &= PWR_PWRCTRL_MASK;
000002  680a              LDR      r2,[r1,#0]
000004  f0220203          BIC      r2,r2,#3
000008  600a              STR      r2,[r1,#0]
;;;211      SDIO->POWER |= SDIO_PowerState;
00000a  680a              LDR      r2,[r1,#0]
00000c  4310              ORRS     r0,r0,r2
00000e  6008              STR      r0,[r1,#0]
;;;212    }
000010  4770              BX       lr
;;;213    
                          ENDP

000012  0000              DCW      0x0000
                  |L24.20|
                          DCD      0x40018000

                          AREA ||i.SDIO_SetSDIOOperation||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOOperation PROC
;;;571    *******************************************************************************/
;;;572    void SDIO_SetSDIOOperation(FunctionalState NewState)
000000  4901              LDR      r1,|L25.8|
;;;573    { 
;;;574      /* Check the parameters */
;;;575      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;576      
;;;577      *(vu32 *) DCTRL_SDIOEN_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;578    }
000004  4770              BX       lr
;;;579    
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      0x423005ac

                          AREA ||i.SDIO_SetSDIOReadWaitMode||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOReadWaitMode PROC
;;;555    *******************************************************************************/
;;;556    void SDIO_SetSDIOReadWaitMode(u32 SDIO_ReadWaitMode)
000000  4901              LDR      r1,|L26.8|
;;;557    {
;;;558      /* Check the parameters */
;;;559      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;560      
;;;561      *(vu32 *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
000002  6008              STR      r0,[r1,#0]
;;;562    }
000004  4770              BX       lr
;;;563    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      0x423005a8

                          AREA ||i.SDIO_StartSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StartSDIOReadWait PROC
;;;521    *******************************************************************************/
;;;522    void SDIO_StartSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L27.8|
;;;523    { 
;;;524      /* Check the parameters */
;;;525      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;526      
;;;527      *(vu32 *) DCTRL_RWSTART_BB = (u32) NewState;
000002  6008              STR      r0,[r1,#0]
;;;528    }
000004  4770              BX       lr
;;;529    
                          ENDP

000006  0000              DCW      0x0000
                  |L27.8|
                          DCD      0x423005a0

                          AREA ||i.SDIO_StopSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StopSDIOReadWait PROC
;;;537    *******************************************************************************/
;;;538    void SDIO_StopSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;539    { 
;;;540      /* Check the parameters */
;;;541      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;542      
;;;543      *(vu32 *) DCTRL_RWSTOP_BB = (u32) NewState;
000002  6008              STR      r0,[r1,#0]
;;;544    }
000004  4770              BX       lr
;;;545    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x423005a4

                          AREA ||i.SDIO_StructInit||, CODE, READONLY, ALIGN=1

                  SDIO_StructInit PROC
;;;167    *******************************************************************************/
;;;168    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000000  2100              MOVS     r1,#0
;;;169    {
;;;170      /* SDIO_InitStruct members default value */
;;;171      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000002  7001              STRB     r1,[r0,#0]
;;;172      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;173      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000004  6041              STR      r1,[r0,#4]
;;;174      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
000006  6081              STR      r1,[r0,#8]
;;;175      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
000008  60c1              STR      r1,[r0,#0xc]
;;;176      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00000a  6101              STR      r1,[r0,#0x10]
00000c  6141              STR      r1,[r0,#0x14]
;;;177    }
00000e  4770              BX       lr
;;;178    
                          ENDP


                          AREA ||i.SDIO_WriteData||, CODE, READONLY, ALIGN=2

                  SDIO_WriteData PROC
;;;495    *******************************************************************************/
;;;496    void SDIO_WriteData(u32 Data)
000000  4901              LDR      r1,|L30.8|
;;;497    { 
;;;498      SDIO->FIFO = Data;
000002  f8c10080          STR      r0,[r1,#0x80]
;;;499    }
000006  4770              BX       lr
;;;500    
                          ENDP

                  |L30.8|
                          DCD      0x40018000
