; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_wwdg.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_wwdg.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I..\..\project -I..\..\library\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=517 -DVECT_TAB_FLASH --omf_browse=.\obj\stm32f10x_wwdg.crf ..\..\library\src\stm32f10x_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;179    *******************************************************************************/
;;;180    void WWDG_ClearFlag(void)
000000  4901              LDR      r1,|L1.8|
;;;181    {
;;;182      WWDG->SR = (u32)RESET;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;183    }
000006  4770              BX       lr
;;;184    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;52     *******************************************************************************/
;;;53     void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;54     {
;;;55       RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;56       RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  e8bd4010          POP      {r4,lr}
00000e  2100              MOVS     r1,#0
000010  f44f6000          MOV      r0,#0x800
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;57     }
;;;58     
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;152    *******************************************************************************/
;;;153    void WWDG_Enable(u8 Counter)
000000  4902              LDR      r1,|L3.12|
;;;154    {
;;;155      /* Check the parameters */
;;;156      assert_param(IS_WWDG_COUNTER(Counter));
;;;157    
;;;158      WWDG->CR = CR_WDGA_Set | Counter;
000002  f0400080          ORR      r0,r0,#0x80
000006  6008              STR      r0,[r1,#0]
;;;159    }
000008  4770              BX       lr
;;;160    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;120    *******************************************************************************/
;;;121    void WWDG_EnableIT(void)
000000  4902              LDR      r1,|L4.12|
;;;122    {
;;;123      *(vu32 *) CFR_EWI_BB = (u32)ENABLE;
000002  2001              MOVS     r0,#1
000004  f8c100a4          STR      r0,[r1,#0xa4]
;;;124    }
000008  4770              BX       lr
;;;125    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x42058000

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;167    *******************************************************************************/
;;;168    FlagStatus WWDG_GetFlagStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;169    {
;;;170      return (FlagStatus)(WWDG->SR);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;171    }
000006  4770              BX       lr
;;;172    
                          ENDP

                  |L5.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;133    *******************************************************************************/
;;;134    void WWDG_SetCounter(u8 Counter)
000000  4902              LDR      r1,|L6.12|
;;;135    {
;;;136      /* Check the parameters */
;;;137      assert_param(IS_WWDG_COUNTER(Counter));
;;;138    
;;;139      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;140         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;141      WWDG->CR = Counter & BIT_Mask;
000002  f000007f          AND      r0,r0,#0x7f
000006  6008              STR      r0,[r1,#0]
;;;142    }
000008  4770              BX       lr
;;;143    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;70     *******************************************************************************/
;;;71     void WWDG_SetPrescaler(u32 WWDG_Prescaler)
000000  4a03              LDR      r2,|L7.16|
;;;72     {
;;;73       u32 tmpreg = 0;
;;;74     
;;;75       /* Check the parameters */
;;;76       assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;77     
;;;78       /* Clear WDGTB[1:0] bits */
;;;79       tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
000002  6811              LDR      r1,[r2,#0]
000004  f42171c0          BIC      r1,r1,#0x180
;;;80     
;;;81       /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;82       tmpreg |= WWDG_Prescaler;
000008  4308              ORRS     r0,r0,r1
;;;83     
;;;84       /* Store the new value */
;;;85       WWDG->CFR = tmpreg;
00000a  6010              STR      r0,[r2,#0]
;;;86     }
00000c  4770              BX       lr
;;;87     
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40002c04

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;96     *******************************************************************************/
;;;97     void WWDG_SetWindowValue(u8 WindowValue)
000000  4a04              LDR      r2,|L8.20|
;;;98     {
;;;99       u32 tmpreg = 0;
;;;100    
;;;101      /* Check the parameters */
;;;102      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;103    
;;;104      /* Clear W[6:0] bits */
;;;105      tmpreg = WWDG->CFR & CFR_W_Mask;
000002  6811              LDR      r1,[r2,#0]
;;;106    
;;;107      /* Set W[6:0] bits according to WindowValue value */
;;;108      tmpreg |= WindowValue & BIT_Mask;
000004  f000007f          AND      r0,r0,#0x7f
000008  f021017f          BIC      r1,r1,#0x7f           ;105
00000c  4308              ORRS     r0,r0,r1
;;;109    
;;;110      /* Store the new value */
;;;111      WWDG->CFR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;112    }
000010  4770              BX       lr
;;;113    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40002c04
