; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_dma.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I..\..\project -I..\..\library\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 -DVECT_TAB_FLASH --omf_browse=.\obj\stm32f10x_dma.crf ..\..\library\src\stm32f10x_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;491    *******************************************************************************/
;;;492    void DMA_ClearFlag(u32 DMA_FLAG)
000000  f0105f80          TST      r0,#0x10000000
;;;493    {
;;;494      /* Check the parameters */
;;;495      assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
;;;496    
;;;497      /* Calculate the used DMA */
;;;498      if ((DMA_FLAG & FLAG_Mask) != (u32)RESET)
;;;499      {
;;;500        /* Clear the selected DMA flags */
;;;501        DMA2->IFCR = DMA_FLAG;
000004  bf19              ITTEE    NE
000006  4902              LDRNE    r1,|L1.16|
000008  6008              STRNE    r0,[r1,#0]
;;;502      }
;;;503      else
;;;504      {
;;;505        /* Clear the selected DMA flags */
;;;506        DMA1->IFCR = DMA_FLAG;
00000a  4902              LDREQ    r1,|L1.20|
00000c  6048              STREQ    r0,[r1,#4]
;;;507      }
;;;508    }
00000e  4770              BX       lr
;;;509    
                          ENDP

                  |L1.16|
                          DCD      0x40020404
                  |L1.20|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;658    *******************************************************************************/
;;;659    void DMA_ClearITPendingBit(u32 DMA_IT)
000000  f0105f80          TST      r0,#0x10000000
;;;660    {
;;;661      /* Check the parameters */
;;;662      assert_param(IS_DMA_CLEAR_IT(DMA_IT));
;;;663    
;;;664      /* Calculate the used DMA */
;;;665      if ((DMA_IT & FLAG_Mask) != (u32)RESET)
;;;666      {
;;;667        /* Clear the selected DMA interrupt pending bits */
;;;668        DMA2->IFCR = DMA_IT;
000004  bf19              ITTEE    NE
000006  4902              LDRNE    r1,|L2.16|
000008  6008              STRNE    r0,[r1,#0]
;;;669      }
;;;670      else
;;;671      {
;;;672        /* Clear the selected DMA interrupt pending bits */
;;;673        DMA1->IFCR = DMA_IT;
00000a  4902              LDREQ    r1,|L2.20|
00000c  6048              STREQ    r0,[r1,#4]
;;;674      }
;;;675    }
00000e  4770              BX       lr
;;;676    
                          ENDP

                  |L2.16|
                          DCD      0x40020404
                  |L2.20|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;268    *******************************************************************************/
;;;269    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;270    {
;;;271      /* Check the parameters */
;;;272      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;273      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;274    
;;;275      if (NewState != DISABLE)
;;;276      {
;;;277        /* Enable the selected DMAy Channelx */
;;;278        DMAy_Channelx->CCR |= CCR_ENABLE_Set;
;;;279      }
;;;280      else
;;;281      {
;;;282        /* Disable the selected DMAy Channelx */
;;;283        DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
000002  6801              LDR      r1,[r0,#0]
000004  bf14              ITE      NE                    ;278
000006  f0410101          ORRNE    r1,r1,#1              ;278
00000a  f0210101          BICEQ    r1,r1,#1
00000e  6001              STR      r1,[r0,#0]            ;278
;;;284      }
;;;285    }
000010  4770              BX       lr
;;;286    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;62     *******************************************************************************/
;;;63     void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;64     {
;;;65       /* Check the parameters */
;;;66       assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;67     
;;;68       /* Disable the selected DMAy Channelx */
;;;69       DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
000002  f0210101          BIC      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;70     
;;;71       /* Reset DMAy Channelx control register */
;;;72       DMAy_Channelx->CCR  = 0;
000008  2100              MOVS     r1,#0
00000a  6001              STR      r1,[r0,#0]
;;;73       
;;;74       /* Reset DMAy Channelx remaining bytes register */
;;;75       DMAy_Channelx->CNDTR = 0;
00000c  6041              STR      r1,[r0,#4]
;;;76       
;;;77       /* Reset DMAy Channelx peripheral address register */
;;;78       DMAy_Channelx->CPAR  = 0;
00000e  6081              STR      r1,[r0,#8]
;;;79       
;;;80       /* Reset DMAy Channelx memory address register */
;;;81       DMAy_Channelx->CMAR = 0;
000010  60c1              STR      r1,[r0,#0xc]
;;;82     
;;;83       switch (*(u32*)&DMAy_Channelx)
000012  4b30              LDR      r3,|L4.212|
;;;84       {
;;;85         case DMA1_Channel1_BASE:
;;;86           /* Reset interrupt pending bits for DMA1 Channel1 */
;;;87           DMA1->IFCR |= DMA1_Channel1_IT_Mask;
000014  4a30              LDR      r2,|L4.216|
000016  1ac1              SUBS     r1,r0,r3              ;83
000018  4298              CMP      r0,r3                 ;83
;;;88           break;
;;;89     
;;;90         case DMA1_Channel2_BASE:
;;;91           /* Reset interrupt pending bits for DMA1 Channel2 */
;;;92           DMA1->IFCR |= DMA1_Channel2_IT_Mask;
;;;93           break;
;;;94     
;;;95         case DMA1_Channel3_BASE:
;;;96           /* Reset interrupt pending bits for DMA1 Channel3 */
;;;97           DMA1->IFCR |= DMA1_Channel3_IT_Mask;
;;;98           break;
;;;99     
;;;100        case DMA1_Channel4_BASE:
;;;101          /* Reset interrupt pending bits for DMA1 Channel4 */
;;;102          DMA1->IFCR |= DMA1_Channel4_IT_Mask;
;;;103          break;
;;;104    
;;;105        case DMA1_Channel5_BASE:
;;;106          /* Reset interrupt pending bits for DMA1 Channel5 */
;;;107          DMA1->IFCR |= DMA1_Channel5_IT_Mask;
;;;108          break;
;;;109    
;;;110        case DMA1_Channel6_BASE:
;;;111          /* Reset interrupt pending bits for DMA1 Channel6 */
;;;112          DMA1->IFCR |= DMA1_Channel6_IT_Mask;
;;;113          break;
;;;114    
;;;115        case DMA1_Channel7_BASE:
;;;116          /* Reset interrupt pending bits for DMA1 Channel7 */
;;;117          DMA1->IFCR |= DMA1_Channel7_IT_Mask;
00001a  bf04              ITT      EQ
00001c  6850              LDREQ    r0,[r2,#4]
00001e  f0406070          ORREQ    r0,r0,#0xf000000
000022  d019              BEQ      |L4.88|
000024  dc27              BGT      |L4.118|
000026  4b2d              LDR      r3,|L4.220|
000028  eba00103          SUB      r1,r0,r3              ;83
00002c  4298              CMP      r0,r3                 ;83
00002e  bf04              ITT      EQ                    ;102
000030  6850              LDREQ    r0,[r2,#4]            ;102
000032  f4404070          ORREQ    r0,r0,#0xf000         ;102
000036  d00f              BEQ      |L4.88|
000038  dc10              BGT      |L4.92|
00003a  4929              LDR      r1,|L4.224|
00003c  1840              ADDS     r0,r0,r1              ;83
00003e  d03e              BEQ      |L4.190|
000040  2814              CMP      r0,#0x14              ;83
000042  bf04              ITT      EQ                    ;92
000044  6850              LDREQ    r0,[r2,#4]            ;92
000046  f04000f0          ORREQ    r0,r0,#0xf0           ;92
00004a  d005              BEQ      |L4.88|
00004c  2828              CMP      r0,#0x28              ;83
00004e  bf06              ITTE     EQ                    ;97
000050  6850              LDREQ    r0,[r2,#4]            ;97
000052  f4406070          ORREQ    r0,r0,#0xf00          ;97
;;;118          break;
;;;119    
;;;120        case DMA2_Channel1_BASE:
;;;121          /* Reset interrupt pending bits for DMA2 Channel1 */
;;;122          DMA2->IFCR |= DMA2_Channel1_IT_Mask;
;;;123          break;
;;;124    
;;;125        case DMA2_Channel2_BASE:
;;;126          /* Reset interrupt pending bits for DMA2 Channel2 */
;;;127          DMA2->IFCR |= DMA2_Channel2_IT_Mask;
;;;128          break;
;;;129    
;;;130        case DMA2_Channel3_BASE:
;;;131          /* Reset interrupt pending bits for DMA2 Channel3 */
;;;132          DMA2->IFCR |= DMA2_Channel3_IT_Mask;
;;;133          break;
;;;134    
;;;135        case DMA2_Channel4_BASE:
;;;136          /* Reset interrupt pending bits for DMA2 Channel4 */
;;;137          DMA2->IFCR |= DMA2_Channel4_IT_Mask;
;;;138          break;
;;;139    
;;;140        case DMA2_Channel5_BASE:
;;;141          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;142          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
;;;143          break;
;;;144          
;;;145        default:
;;;146          break;
;;;147      }
;;;148    }
000056  4770              BXNE     lr
                  |L4.88|
000058  6050              STR      r0,[r2,#4]            ;97
00005a  4770              BX       lr
                  |L4.92|
00005c  2914              CMP      r1,#0x14              ;83
00005e  bf04              ITT      EQ                    ;107
000060  6850              LDREQ    r0,[r2,#4]            ;107
000062  f4402070          ORREQ    r0,r0,#0xf0000        ;107
000066  d0f7              BEQ      |L4.88|
000068  2928              CMP      r1,#0x28              ;83
00006a  bf04              ITT      EQ                    ;112
00006c  6850              LDREQ    r0,[r2,#4]            ;112
00006e  f4400070          ORREQ    r0,r0,#0xf00000       ;112
000072  d0f1              BEQ      |L4.88|
000074  4770              BX       lr
                  |L4.118|
000076  481b              LDR      r0,|L4.228|
000078  f5b17f6c          CMP      r1,#0x3b0             ;83
00007c  bf04              ITT      EQ                    ;132
00007e  6801              LDREQ    r1,[r0,#0]            ;132
000080  f4416170          ORREQ    r1,r1,#0xf00          ;132
000084  d00a              BEQ      |L4.156|
000086  dc0b              BGT      |L4.160|
000088  f5b17f62          CMP      r1,#0x388             ;83
00008c  d01c              BEQ      |L4.200|
00008e  f5b17f67          CMP      r1,#0x39c             ;83
000092  bf06              ITTE     EQ                    ;127
000094  6801              LDREQ    r1,[r0,#0]            ;127
000096  f04101f0          ORREQ    r1,r1,#0xf0           ;127
00009a  4770              BXNE     lr
                  |L4.156|
00009c  6001              STR      r1,[r0,#0]            ;132
00009e  4770              BX       lr
                  |L4.160|
0000a0  f5b17f71          CMP      r1,#0x3c4             ;83
0000a4  bf04              ITT      EQ                    ;137
0000a6  6801              LDREQ    r1,[r0,#0]            ;137
0000a8  f4414170          ORREQ    r1,r1,#0xf000         ;137
0000ac  d0f6              BEQ      |L4.156|
0000ae  f5b17f76          CMP      r1,#0x3d8             ;83
0000b2  bf04              ITT      EQ                    ;142
0000b4  6801              LDREQ    r1,[r0,#0]            ;142
0000b6  f4412170          ORREQ    r1,r1,#0xf0000        ;142
0000ba  d0ef              BEQ      |L4.156|
0000bc  4770              BX       lr
                  |L4.190|
0000be  6850              LDR      r0,[r2,#4]            ;87
0000c0  f040000f          ORR      r0,r0,#0xf            ;87
0000c4  6050              STR      r0,[r2,#4]            ;87
0000c6  4770              BX       lr
                  |L4.200|
0000c8  6801              LDR      r1,[r0,#0]            ;122
0000ca  f041010f          ORR      r1,r1,#0xf            ;122
0000ce  6001              STR      r1,[r0,#0]            ;122
0000d0  4770              BX       lr
;;;149    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L4.212|
                          DCD      0x40020080
                  |L4.216|
                          DCD      0x40020000
                  |L4.220|
                          DCD      0x40020044
                  |L4.224|
                          DCD      0xbffdfff8
                  |L4.228|
                          DCD      0x40020404

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;333    *******************************************************************************/
;;;334    u16 DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6840              LDR      r0,[r0,#4]
;;;335    {
;;;336      /* Check the parameters */
;;;337      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;338    
;;;339      /* Return the number of remaining data units for DMAy Channelx */
;;;340      return ((u16)(DMAy_Channelx->CNDTR));
000002  b280              UXTH     r0,r0
;;;341    }
000004  4770              BX       lr
;;;342    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;398    *******************************************************************************/
;;;399    FlagStatus DMA_GetFlagStatus(u32 DMA_FLAG)
000000  2200              MOVS     r2,#0
;;;400    {
;;;401      FlagStatus bitstatus = RESET;
;;;402      u32 tmpreg = 0;
;;;403    
;;;404      /* Check the parameters */
;;;405      assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
;;;406    
;;;407      /* Calculate the used DMA */
;;;408      if ((DMA_FLAG & FLAG_Mask) != (u32)RESET)
000002  f0105f80          TST      r0,#0x10000000
;;;409      {
;;;410        /* Get DMA2 ISR register value */
;;;411        tmpreg = DMA2->ISR ;
000006  bf14              ITE      NE
000008  4903              LDRNE    r1,|L6.24|
;;;412      }
;;;413      else
;;;414      {
;;;415        /* Get DMA1 ISR register value */
;;;416        tmpreg = DMA1->ISR ;
00000a  4904              LDREQ    r1,|L6.28|
00000c  6809              LDR      r1,[r1,#0]
;;;417      }
;;;418    
;;;419      /* Check the status of the specified DMA flag */
;;;420      if ((tmpreg & DMA_FLAG) != (u32)RESET)
00000e  4201              TST      r1,r0
;;;421      {
;;;422        /* DMA_FLAG is set */
;;;423        bitstatus = SET;
000010  bf18              IT       NE
000012  2201              MOVNE    r2,#1
;;;424      }
;;;425      else
;;;426      {
;;;427        /* DMA_FLAG is reset */
;;;428        bitstatus = RESET;
;;;429      }
;;;430      
;;;431      /* Return the DMA_FLAG status */
;;;432      return  bitstatus;
000014  4610              MOV      r0,r2
;;;433    }
000016  4770              BX       lr
;;;434    
                          ENDP

                  |L6.24|
                          DCD      0x40020400
                  |L6.28|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;566    *******************************************************************************/
;;;567    ITStatus DMA_GetITStatus(u32 DMA_IT)
000000  2200              MOVS     r2,#0
;;;568    {
;;;569      ITStatus bitstatus = RESET;
;;;570      u32 tmpreg = 0;
;;;571    
;;;572      /* Check the parameters */
;;;573      assert_param(IS_DMA_GET_IT(DMA_IT));
;;;574    
;;;575      /* Calculate the used DMA */
;;;576      if ((DMA_IT & FLAG_Mask) != (u32)RESET)
000002  f0105f80          TST      r0,#0x10000000
;;;577      {
;;;578        /* Get DMA2 ISR register value */
;;;579        tmpreg = DMA2->ISR ;
000006  bf14              ITE      NE
000008  4903              LDRNE    r1,|L7.24|
;;;580      }
;;;581      else
;;;582      {
;;;583        /* Get DMA1 ISR register value */
;;;584        tmpreg = DMA1->ISR ;
00000a  4904              LDREQ    r1,|L7.28|
00000c  6809              LDR      r1,[r1,#0]
;;;585      }
;;;586    
;;;587      /* Check the status of the specified DMA interrupt */
;;;588      if ((tmpreg & DMA_IT) != (u32)RESET)
00000e  4201              TST      r1,r0
;;;589      {
;;;590        /* DMA_IT is set */
;;;591        bitstatus = SET;
000010  bf18              IT       NE
000012  2201              MOVNE    r2,#1
;;;592      }
;;;593      else
;;;594      {
;;;595        /* DMA_IT is reset */
;;;596        bitstatus = RESET;
;;;597      }
;;;598      /* Return the DMA_IT status */
;;;599      return  bitstatus;
000014  4610              MOV      r0,r2
;;;600    }
000016  4770              BX       lr
;;;601    
                          ENDP

                  |L7.24|
                          DCD      0x40020400
                  |L7.28|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;303    *******************************************************************************/
;;;304    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, u32 DMA_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;305    {
;;;306      /* Check the parameters */
;;;307      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;308      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;309      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;310    
;;;311      if (NewState != DISABLE)
;;;312      {
;;;313        /* Enable the selected DMA interrupts */
;;;314        DMAy_Channelx->CCR |= DMA_IT;
;;;315      }
;;;316      else
;;;317      {
;;;318        /* Disable the selected DMA interrupts */
;;;319        DMAy_Channelx->CCR &= ~DMA_IT;
000002  6802              LDR      r2,[r0,#0]
000004  bf14              ITE      NE                    ;314
000006  4311              ORRNE    r1,r1,r2              ;314
000008  ea220101          BICEQ    r1,r2,r1
00000c  6001              STR      r1,[r0,#0]            ;314
;;;320      }
;;;321    }
00000e  4770              BX       lr
;;;322    
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=1

                  DMA_Init PROC
;;;162    ******************************************************************************/
;;;163    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b410              PUSH     {r4}
;;;164    {
;;;165      u32 tmpreg = 0;
;;;166    
;;;167      /* Check the parameters */
;;;168      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;169      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;170      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;171      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;172      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
;;;173      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;174      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;175      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;176      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;177      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;178    
;;;179    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;180      /* Get the DMAy_Channelx CCR value */
;;;181      tmpreg = DMAy_Channelx->CCR;
000002  6802              LDR      r2,[r0,#0]
;;;182      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;183      tmpreg &= CCR_CLEAR_Mask;
;;;184      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;185      /* Set DIR bit according to DMA_DIR value */
;;;186      /* Set CIRC bit according to DMA_Mode value */
;;;187      /* Set PINC bit according to DMA_PeripheralInc value */
;;;188      /* Set MINC bit according to DMA_MemoryInc value */
;;;189      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;190      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;191      /* Set PL bits according to DMA_Priority value */
;;;192      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;193      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
000004  f8d1c020          LDR      r12,[r1,#0x20]
000008  688b              LDR      r3,[r1,#8]
00000a  f36f120e          BFC      r2,#4,#11             ;183
00000e  ea43030c          ORR      r3,r3,r12
000012  e9d1c404          LDRD     r12,r4,[r1,#0x10]
000016  ea4c0c04          ORR      r12,r12,r4
00001a  ea43030c          ORR      r3,r3,r12
00001e  f8d1c018          LDR      r12,[r1,#0x18]
000022  ea43030c          ORR      r3,r3,r12
000026  f8d1c01c          LDR      r12,[r1,#0x1c]
00002a  ea43030c          ORR      r3,r3,r12
00002e  f8d1c024          LDR      r12,[r1,#0x24]
000032  ea43030c          ORR      r3,r3,r12
000036  f8d1c028          LDR      r12,[r1,#0x28]
00003a  ea43030c          ORR      r3,r3,r12
00003e  431a              ORRS     r2,r2,r3
;;;194                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;195                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;196                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;197      /* Write to DMAy Channelx CCR */
;;;198      DMAy_Channelx->CCR = tmpreg;
000040  6002              STR      r2,[r0,#0]
;;;199    
;;;200    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;201      /* Write to DMAy Channelx CNDTR */
;;;202      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
000042  68ca              LDR      r2,[r1,#0xc]
000044  6042              STR      r2,[r0,#4]
;;;203    
;;;204    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;205      /* Write to DMAy Channelx CPAR */
;;;206      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000046  680a              LDR      r2,[r1,#0]
000048  6082              STR      r2,[r0,#8]
;;;207    
;;;208    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;209      /* Write to DMAy Channelx CMAR */
;;;210      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
00004a  6849              LDR      r1,[r1,#4]
00004c  60c1              STR      r1,[r0,#0xc]
;;;211    }
00004e  bc10              POP      {r4}
000050  4770              BX       lr
;;;212    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;220    *******************************************************************************/
;;;221    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;222    {
;;;223    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;224      /* Initialize the DMA_PeripheralBaseAddr member */
;;;225      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
;;;226    
;;;227      /* Initialize the DMA_MemoryBaseAddr member */
;;;228      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;229    
;;;230      /* Initialize the DMA_DIR member */
;;;231      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000004  6041              STR      r1,[r0,#4]
;;;232    
;;;233      /* Initialize the DMA_BufferSize member */
;;;234      DMA_InitStruct->DMA_BufferSize = 0;
000006  6081              STR      r1,[r0,#8]
;;;235    
;;;236      /* Initialize the DMA_PeripheralInc member */
;;;237      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000008  60c1              STR      r1,[r0,#0xc]
;;;238    
;;;239      /* Initialize the DMA_MemoryInc member */
;;;240      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;241    
;;;242      /* Initialize the DMA_PeripheralDataSize member */
;;;243      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000c  6141              STR      r1,[r0,#0x14]
;;;244    
;;;245      /* Initialize the DMA_MemoryDataSize member */
;;;246      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;247    
;;;248      /* Initialize the DMA_Mode member */
;;;249      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000010  61c1              STR      r1,[r0,#0x1c]
;;;250    
;;;251      /* Initialize the DMA_Priority member */
;;;252      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000012  6201              STR      r1,[r0,#0x20]
;;;253    
;;;254      /* Initialize the DMA_M2M member */
;;;255      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000014  6241              STR      r1,[r0,#0x24]
000016  6281              STR      r1,[r0,#0x28]
;;;256    }
000018  4770              BX       lr
;;;257    
                          ENDP

