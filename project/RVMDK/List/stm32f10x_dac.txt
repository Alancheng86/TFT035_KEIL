; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_dac.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_dac.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I..\..\project -I..\..\library\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 -DVECT_TAB_FLASH --omf_browse=.\obj\stm32f10x_dac.crf ..\..\library\src\stm32f10x_dac.c]
                          THUMB

                          AREA ||i.DAC_Cmd||, CODE, READONLY, ALIGN=2

                  DAC_Cmd PROC
;;;145    *******************************************************************************/
;;;146    void DAC_Cmd(u32 DAC_Channel, FunctionalState NewState)
000000  4a05              LDR      r2,|L1.24|
;;;147    {
;;;148      /* Check the parameters */
;;;149      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;150      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;151    
;;;152      if (NewState != DISABLE)
;;;153      {
;;;154        /* Enable the selected DAC channel */
;;;155        DAC->CR |= CR_EN_Set << DAC_Channel;
000002  2301              MOVS     r3,#1
000004  fa03f000          LSL      r0,r3,r0
000008  2900              CMP      r1,#0                 ;152
;;;156      }
;;;157      else
;;;158      {
;;;159        /* Disable the selected DAC channel */
;;;160        DAC->CR &= ~(CR_EN_Set << DAC_Channel);
00000a  6811              LDR      r1,[r2,#0]
00000c  bf14              ITE      NE                    ;155
00000e  4308              ORRNE    r0,r0,r1              ;155
000010  ea210000          BICEQ    r0,r1,r0
000014  6010              STR      r0,[r2,#0]            ;155
;;;161      }
;;;162    }
000016  4770              BX       lr
;;;163    
                          ENDP

                  |L1.24|
                          DCD      0x40007400

                          AREA ||i.DAC_DMACmd||, CODE, READONLY, ALIGN=2

                  DAC_DMACmd PROC
;;;175    *******************************************************************************/
;;;176    void DAC_DMACmd(u32 DAC_Channel, FunctionalState NewState)
000000  4a05              LDR      r2,|L2.24|
;;;177    {
;;;178      /* Check the parameters */
;;;179      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;180      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;181    
;;;182      if (NewState != DISABLE)
;;;183      {
;;;184        /* Enable the selected DAC channel DMA request */
;;;185        DAC->CR |= CR_DMAEN_Set << DAC_Channel;
000002  1493              ASRS     r3,r2,#18
000004  fa03f000          LSL      r0,r3,r0
000008  2900              CMP      r1,#0                 ;182
;;;186      }
;;;187      else
;;;188      {
;;;189        /* Disable the selected DAC channel DMA request */
;;;190        DAC->CR &= ~(CR_DMAEN_Set << DAC_Channel);
00000a  6811              LDR      r1,[r2,#0]
00000c  bf14              ITE      NE                    ;185
00000e  4308              ORRNE    r0,r0,r1              ;185
000010  ea210000          BICEQ    r0,r1,r0
000014  6010              STR      r0,[r2,#0]            ;185
;;;191      }
;;;192    }
000016  4770              BX       lr
;;;193    
                          ENDP

                  |L2.24|
                          DCD      0x40007400

                          AREA ||i.DAC_DeInit||, CODE, READONLY, ALIGN=1

                  DAC_DeInit PROC
;;;58     *******************************************************************************/
;;;59     void DAC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;60     {
;;;61       /* Enable DAC reset state */
;;;62       RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
000002  2101              MOVS     r1,#1
000004  0748              LSLS     r0,r1,#29
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;63       /* Release DAC from reset state */
;;;64       RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
00000a  e8bd4010          POP      {r4,lr}
00000e  2100              MOVS     r1,#0
000010  f04f5000          MOV      r0,#0x20000000
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;65     }
;;;66     
                          ENDP


                          AREA ||i.DAC_DualSoftwareTriggerCmd||, CODE, READONLY, ALIGN=2

                  DAC_DualSoftwareTriggerCmd PROC
;;;232    *******************************************************************************/
;;;233    void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
000000  4904              LDR      r1,|L4.20|
;;;234    {
;;;235      /* Check the parameters */
;;;236      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;237    
;;;238      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;239      {
;;;240        /* Enable software trigger for both DAC channels */
;;;241        DAC->SWTRIGR |= DUAL_SWTRIG_Set ;
;;;242      }
;;;243      else
;;;244      {
;;;245        /* Disable software trigger for both DAC channels */
;;;246        DAC->SWTRIGR &= DUAL_SWTRIG_Reset;
000004  6808              LDR      r0,[r1,#0]
000006  bf14              ITE      NE                    ;241
000008  f0400003          ORRNE    r0,r0,#3              ;241
00000c  f0200003          BICEQ    r0,r0,#3
000010  6008              STR      r0,[r1,#0]            ;241
;;;247      }
;;;248    }
000012  4770              BX       lr
;;;249    
                          ENDP

                  |L4.20|
                          DCD      0x40007404

                          AREA ||i.DAC_GetDataOutputValue||, CODE, READONLY, ALIGN=1

                  DAC_GetDataOutputValue PROC
;;;379    *******************************************************************************/
;;;380    u16 DAC_GetDataOutputValue(u32 DAC_Channel)
000000  0880              LSRS     r0,r0,#2
;;;381    {
;;;382      /* Check the parameters */
;;;383      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;384    
;;;385      /* Returns the DAC channel data output register value */
;;;386      return (u16) (*(vu32*)(DAC_BASE + DOR_Offset + ((u32)DAC_Channel >> 2)));
000002  f1004080          ADD      r0,r0,#0x40000000
000006  f50040e0          ADD      r0,r0,#0x7000
00000a  f8d0042c          LDR      r0,[r0,#0x42c]
00000e  b280              UXTH     r0,r0
;;;387    }
000010  4770              BX       lr
;;;388    
                          ENDP


                          AREA ||i.DAC_Init||, CODE, READONLY, ALIGN=2

                  DAC_Init PROC
;;;80     *******************************************************************************/
;;;81     void DAC_Init(u32 DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
000000  4b0b              LDR      r3,|L6.48|
;;;82     {
000002  b410              PUSH     {r4}
;;;83       u32 tmpreg1 = 0, tmpreg2 = 0;
;;;84     
;;;85       /* Check the DAC parameters */
;;;86       assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
;;;87       assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
;;;88       assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
;;;89       assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
;;;90     
;;;91     /*---------------------------- DAC CR Configuration --------------------------*/
;;;92       /* Get the DAC CR value */
;;;93       tmpreg1 = DAC->CR;
000004  681a              LDR      r2,[r3,#0]
;;;94       /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
;;;95       tmpreg1 &= ~(CR_CLEAR_Mask << DAC_Channel);
000006  f6407cfe          MOV      r12,#0xffe
00000a  fa0cfc00          LSL      r12,r12,r0
00000e  ea22020c          BIC      r2,r2,r12
000012  e9d1c400          LDRD     r12,r4,[r1,#0]
;;;96       /* Configure for the selected DAC channel: buffer output, trigger, wave genration,
;;;97          mask/amplitude for wave genration */
;;;98       /* Set TSELx and TENx bits according to DAC_Trigger value */
;;;99       /* Set WAVEx bits according to DAC_WaveGeneration value */
;;;100      /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
;;;101      /* Set BOFFx bit according to DAC_OutputBuffer value */   
;;;102      tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
000016  ea4c0c04          ORR      r12,r12,r4
00001a  e9d14102          LDRD     r4,r1,[r1,#8]
00001e  4321              ORRS     r1,r1,r4
000020  ea4c0101          ORR      r1,r12,r1
;;;103                 DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
;;;104      /* Calculate CR register value depending on DAC_Channel */
;;;105      tmpreg1 |= tmpreg2 << DAC_Channel;
000024  fa01f000          LSL      r0,r1,r0
000028  4310              ORRS     r0,r0,r2
;;;106      /* Write to DAC CR */
;;;107      DAC->CR = tmpreg1;
00002a  6018              STR      r0,[r3,#0]
;;;108    }
00002c  bc10              POP      {r4}
00002e  4770              BX       lr
;;;109    
                          ENDP

                  |L6.48|
                          DCD      0x40007400

                          AREA ||i.DAC_SetChannel1Data||, CODE, READONLY, ALIGN=1

                  DAC_SetChannel1Data PROC
;;;297    *******************************************************************************/
;;;298    void DAC_SetChannel1Data(u32 DAC_Align, u16 Data)
000000  f1004080          ADD      r0,r0,#0x40000000
;;;299    {
000004  f50040e0          ADD      r0,r0,#0x7000
;;;300      /* Check the parameters */
;;;301      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;302      assert_param(IS_DAC_DATA(Data));
;;;303    
;;;304      /* Set the DAC channel1 selected data holding register */
;;;305      *((vu32 *)(DAC_BASE + DHR12R1_Offset + DAC_Align)) = (u32)Data;
000008  f8c01408          STR      r1,[r0,#0x408]
;;;306    }
00000c  4770              BX       lr
;;;307    
                          ENDP


                          AREA ||i.DAC_SetChannel2Data||, CODE, READONLY, ALIGN=1

                  DAC_SetChannel2Data PROC
;;;320    *******************************************************************************/
;;;321    void DAC_SetChannel2Data(u32 DAC_Align, u16 Data)
000000  f1004080          ADD      r0,r0,#0x40000000
;;;322    {
000004  f50040e0          ADD      r0,r0,#0x7000
;;;323      /* Check the parameters */
;;;324      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;325      assert_param(IS_DAC_DATA(Data));
;;;326    
;;;327      /* Set the DAC channel2 selected data holding register */
;;;328      *((vu32 *)(DAC_BASE + DHR12R2_Offset + DAC_Align)) = (u32)Data;
000008  f8c01414          STR      r1,[r0,#0x414]
;;;329    }
00000c  4770              BX       lr
;;;330    
                          ENDP


                          AREA ||i.DAC_SetDualChannelData||, CODE, READONLY, ALIGN=1

                  DAC_SetDualChannelData PROC
;;;346    *******************************************************************************/
;;;347    void DAC_SetDualChannelData(u32 DAC_Align, u16 Data2, u16 Data1)
000000  2808              CMP      r0,#8
;;;348    {
;;;349      u32 data = 0;
;;;350    
;;;351      /* Check the parameters */
;;;352      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;353      assert_param(IS_DAC_DATA(Data1));
;;;354      assert_param(IS_DAC_DATA(Data2));
;;;355      
;;;356      /* Calculate and set dual DAC data holding register value */
;;;357      if (DAC_Align == DAC_Align_8b_R)
;;;358      {
;;;359        data = ((u32)Data2 << 8) | Data1; 
000002  bf0c              ITE      EQ
000004  ea422101          ORREQ    r1,r2,r1,LSL #8
;;;360      }
;;;361      else
;;;362      {
;;;363        data = ((u32)Data2 << 16) | Data1;
000008  ea424101          ORRNE    r1,r2,r1,LSL #16
00000c  f1004080          ADD      r0,r0,#0x40000000
000010  f50040e0          ADD      r0,r0,#0x7000
;;;364      }
;;;365    
;;;366      /* Set the dual DAC selected data holding register */
;;;367      *((vu32 *)(DAC_BASE + DHR12RD_Offset + DAC_Align)) = data;
000014  f8c01420          STR      r1,[r0,#0x420]
;;;368    }
000018  4770              BX       lr
;;;369    
                          ENDP


                          AREA ||i.DAC_SoftwareTriggerCmd||, CODE, READONLY, ALIGN=2

                  DAC_SoftwareTriggerCmd PROC
;;;205    *******************************************************************************/
;;;206    void DAC_SoftwareTriggerCmd(u32 DAC_Channel, FunctionalState NewState)
000000  4a06              LDR      r2,|L10.28|
;;;207    {
;;;208      /* Check the parameters */
;;;209      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;210      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;211    
;;;212      if (NewState != DISABLE)
;;;213      {
;;;214        /* Enable software trigger for the selected DAC channel */
;;;215        DAC->SWTRIGR |= SWTRIGR_SWTRIG_Set << (DAC_Channel >> 4);
000002  0900              LSRS     r0,r0,#4
000004  2301              MOVS     r3,#1
000006  fa03f000          LSL      r0,r3,r0
00000a  2900              CMP      r1,#0                 ;212
;;;216      }
;;;217      else
;;;218      {
;;;219        /* Disable software trigger for the selected DAC channel */
;;;220        DAC->SWTRIGR &= ~(SWTRIGR_SWTRIG_Set << (DAC_Channel >> 4));
00000c  6811              LDR      r1,[r2,#0]
00000e  bf14              ITE      NE                    ;215
000010  4308              ORRNE    r0,r0,r1              ;215
000012  ea210000          BICEQ    r0,r1,r0
000016  6010              STR      r0,[r2,#0]            ;215
;;;221      }
;;;222    }
000018  4770              BX       lr
;;;223    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x40007404

                          AREA ||i.DAC_StructInit||, CODE, READONLY, ALIGN=1

                  DAC_StructInit PROC
;;;117    *******************************************************************************/
;;;118    void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
000000  2100              MOVS     r1,#0
;;;119    {
;;;120    /*--------------- Reset DAC init structure parameters values -----------------*/
;;;121      /* Initialize the DAC_Trigger member */
;;;122      DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
;;;123    
;;;124      /* Initialize the DAC_WaveGeneration member */
;;;125      DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
000002  6001              STR      r1,[r0,#0]
;;;126    
;;;127      /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
;;;128      DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
000004  6041              STR      r1,[r0,#4]
;;;129    
;;;130      /* Initialize the DAC_OutputBuffer member */
;;;131      DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
000006  6081              STR      r1,[r0,#8]
000008  60c1              STR      r1,[r0,#0xc]
;;;132    }
00000a  4770              BX       lr
;;;133    
                          ENDP


                          AREA ||i.DAC_WaveGenerationCmd||, CODE, READONLY, ALIGN=2

                  DAC_WaveGenerationCmd PROC
;;;265    *******************************************************************************/
;;;266    void DAC_WaveGenerationCmd(u32 DAC_Channel, u32 DAC_Wave, FunctionalState NewState)
000000  4b05              LDR      r3,|L12.24|
;;;267    {
;;;268      /* Check the parameters */
;;;269      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;270      assert_param(IS_DAC_WAVE(DAC_Wave)); 
;;;271      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;272    
;;;273      if (NewState != DISABLE)
;;;274      {
;;;275        /* Enable the selected wave generation for the selected DAC channel */
;;;276        DAC->CR |= DAC_Wave << DAC_Channel;
000002  fa01f000          LSL      r0,r1,r0
000006  2a00              CMP      r2,#0                 ;273
;;;277      }
;;;278      else
;;;279      {
;;;280        /* Disable the selected wave generation for the selected DAC channel */
;;;281        DAC->CR &= ~(DAC_Wave << DAC_Channel);
000008  6819              LDR      r1,[r3,#0]
00000a  bf14              ITE      NE                    ;276
00000c  4308              ORRNE    r0,r0,r1              ;276
00000e  ea210000          BICEQ    r0,r1,r0
000012  6018              STR      r0,[r3,#0]            ;276
;;;282      }
;;;283    }
000014  4770              BX       lr
;;;284    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      0x40007400
