; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_iwdg.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_iwdg.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I..\..\project -I..\..\library\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=517 -DVECT_TAB_FLASH --omf_browse=.\obj\stm32f10x_iwdg.crf ..\..\library\src\stm32f10x_iwdg.c]
                          THUMB

                          AREA ||i.IWDG_Enable||, CODE, READONLY, ALIGN=2

                  IWDG_Enable PROC
;;;112    *******************************************************************************/
;;;113    void IWDG_Enable(void)
000000  4902              LDR      r1,|L1.12|
;;;114    {
;;;115      IWDG->KR = KR_KEY_Enable;
000002  f64c40cc          MOV      r0,#0xcccc
000006  6008              STR      r0,[r1,#0]
;;;116    }
000008  4770              BX       lr
;;;117    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  IWDG_GetFlagStatus PROC
;;;127    *******************************************************************************/
;;;128    FlagStatus IWDG_GetFlagStatus(u16 IWDG_FLAG)
000000  4a03              LDR      r2,|L2.16|
;;;129    {
000002  4601              MOV      r1,r0
;;;130      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;131    
;;;132      /* Check the parameters */
;;;133      assert_param(IS_IWDG_FLAG(IWDG_FLAG));
;;;134    
;;;135      if ((IWDG->SR & IWDG_FLAG) != (u32)RESET)
000006  68d2              LDR      r2,[r2,#0xc]
000008  420a              TST      r2,r1
;;;136      {
;;;137        bitstatus = SET;
00000a  bf18              IT       NE
00000c  2001              MOVNE    r0,#1
;;;138      }
;;;139      else
;;;140      {
;;;141        bitstatus = RESET;
;;;142      }
;;;143    
;;;144      /* Return the flag status */
;;;145      return bitstatus;
;;;146    }
00000e  4770              BX       lr
;;;147    
                          ENDP

                  |L2.16|
                          DCD      0x40003000

                          AREA ||i.IWDG_ReloadCounter||, CODE, READONLY, ALIGN=2

                  IWDG_ReloadCounter PROC
;;;99     *******************************************************************************/
;;;100    void IWDG_ReloadCounter(void)
000000  4902              LDR      r1,|L3.12|
;;;101    {
;;;102      IWDG->KR = KR_KEY_Reload;
000002  f64a20aa          MOV      r0,#0xaaaa
000006  6008              STR      r0,[r1,#0]
;;;103    }
000008  4770              BX       lr
;;;104    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  IWDG_SetPrescaler PROC
;;;67     *******************************************************************************/
;;;68     void IWDG_SetPrescaler(u8 IWDG_Prescaler)
000000  4901              LDR      r1,|L4.8|
;;;69     {
;;;70       /* Check the parameters */
;;;71       assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
;;;72     
;;;73       IWDG->PR = IWDG_Prescaler;
000002  6048              STR      r0,[r1,#4]
;;;74     }
000004  4770              BX       lr
;;;75     
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetReload||, CODE, READONLY, ALIGN=2

                  IWDG_SetReload PROC
;;;83     *******************************************************************************/
;;;84     void IWDG_SetReload(u16 Reload)
000000  4901              LDR      r1,|L5.8|
;;;85     {
;;;86       /* Check the parameters */
;;;87       assert_param(IS_IWDG_RELOAD(Reload));
;;;88     
;;;89       IWDG->RLR = Reload;
000002  6088              STR      r0,[r1,#8]
;;;90     }
000004  4770              BX       lr
;;;91     
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x40003000

                          AREA ||i.IWDG_WriteAccessCmd||, CODE, READONLY, ALIGN=2

                  IWDG_WriteAccessCmd PROC
;;;44     *******************************************************************************/
;;;45     void IWDG_WriteAccessCmd(u16 IWDG_WriteAccess)
000000  4901              LDR      r1,|L6.8|
;;;46     {
;;;47       /* Check the parameters */
;;;48       assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
;;;49     
;;;50       IWDG->KR = IWDG_WriteAccess;
000002  6008              STR      r0,[r1,#0]
;;;51     }
000004  4770              BX       lr
;;;52     
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40003000
