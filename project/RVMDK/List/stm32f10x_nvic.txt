; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_nvic.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_nvic.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I..\..\project -I..\..\library\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=523 -DVECT_TAB_FLASH --omf_browse=.\obj\stm32f10x_nvic.crf ..\..\library\src\stm32f10x_nvic.c]
                          THUMB

                          AREA ||i.NVIC_BASEPRICONFIG||, CODE, READONLY, ALIGN=1

                  NVIC_BASEPRICONFIG PROC
;;;233    *******************************************************************************/
;;;234    void NVIC_BASEPRICONFIG(u32 NewPriority)
000000  0100              LSLS     r0,r0,#4
;;;235    {
;;;236      /* Check the parameters */
;;;237      assert_param(IS_NVIC_BASE_PRI(NewPriority));
;;;238      
;;;239      __BASEPRICONFIG(NewPriority << 0x04);
000002  f7ffbffe          B.W      __BASEPRICONFIG
;;;240    }
;;;241    
                          ENDP


                          AREA ||i.NVIC_ClearIRQChannelPendingBit||, CODE, READONLY, ALIGN=1

                  NVIC_ClearIRQChannelPendingBit PROC
;;;316    *******************************************************************************/
;;;317    void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
000000  f000011f          AND      r1,r0,#0x1f
;;;318    {
;;;319      /* Check the parameters */
;;;320      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;321      
;;;322      NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
000004  2201              MOVS     r2,#1
000006  fa02f101          LSL      r1,r2,r1
00000a  0940              LSRS     r0,r0,#5
00000c  0080              LSLS     r0,r0,#2
00000e  f10020e0          ADD      r0,r0,#0xe000e000
000012  f8c01280          STR      r1,[r0,#0x280]
;;;323    }
000016  4770              BX       lr
;;;324    
                          ENDP


                          AREA ||i.NVIC_ClearSystemHandlerPendingBit||, CODE, READONLY, ALIGN=2

                  NVIC_ClearSystemHandlerPendingBit PROC
;;;613    *******************************************************************************/
;;;614    void NVIC_ClearSystemHandlerPendingBit(u32 SystemHandler)
000000  4905              LDR      r1,|L3.24|
;;;615    {
;;;616      u32 tmp = 0x00;
;;;617    
;;;618      /* Check the parameters */
;;;619      assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
;;;620      
;;;621      /* Get the System Handler pending bit position */
;;;622      tmp = SystemHandler & (u32)0x1F;
000002  f000001f          AND      r0,r0,#0x1f
;;;623      /* Clear the corresponding System Handler pending bit */
;;;624      SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
000006  680a              LDR      r2,[r1,#0]
000008  2301              MOVS     r3,#1
00000a  1e40              SUBS     r0,r0,#1
00000c  fa03f000          LSL      r0,r3,r0
000010  4310              ORRS     r0,r0,r2
000012  6008              STR      r0,[r1,#0]
;;;625    }
000014  4770              BX       lr
;;;626    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0xe000ed04

                          AREA ||i.NVIC_DeInit||, CODE, READONLY, ALIGN=1

                  NVIC_DeInit PROC
;;;35     *******************************************************************************/
;;;36     void NVIC_DeInit(void)
000000  2000              MOVS     r0,#0
;;;37     {
;;;38       u32 index = 0;
;;;39       
;;;40       NVIC->ICER[0] = 0xFFFFFFFF;
000002  f04f21e0          MOV      r1,#0xe000e000
000006  1e42              SUBS     r2,r0,#1
000008  f8c12180          STR      r2,[r1,#0x180]
;;;41       NVIC->ICER[1] = 0x0FFFFFFF;
00000c  0913              LSRS     r3,r2,#4
00000e  f8c13184          STR      r3,[r1,#0x184]
;;;42       NVIC->ICPR[0] = 0xFFFFFFFF;
000012  f8c12280          STR      r2,[r1,#0x280]
;;;43       NVIC->ICPR[1] = 0x0FFFFFFF;
000016  f8c13284          STR      r3,[r1,#0x284]
00001a  4601              MOV      r1,r0
                  |L4.28|
;;;44       
;;;45       for(index = 0; index < 0x0F; index++)
;;;46       {
;;;47          NVIC->IPR[index] = 0x00000000;
00001c  0082              LSLS     r2,r0,#2
00001e  f10222e0          ADD      r2,r2,#0xe000e000
000022  f8c21400          STR      r1,[r2,#0x400]
000026  1c40              ADDS     r0,r0,#1
000028  280f              CMP      r0,#0xf               ;45
00002a  d3f7              BCC      |L4.28|
;;;48       } 
;;;49     }
00002c  4770              BX       lr
;;;50     
                          ENDP


                          AREA ||i.NVIC_GenerateCoreReset||, CODE, READONLY, ALIGN=2

                  NVIC_GenerateCoreReset PROC
;;;420    *******************************************************************************/
;;;421    void NVIC_GenerateCoreReset(void)
000000  4902              LDR      r1,|L5.12|
;;;422    {
;;;423      SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
000002  4801              LDR      r0,|L5.8|
000004  6008              STR      r0,[r1,#0]
;;;424    }
000006  4770              BX       lr
;;;425    
                          ENDP

                  |L5.8|
                          DCD      0x05fa0001
                  |L5.12|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_GenerateSystemReset||, CODE, READONLY, ALIGN=2

                  NVIC_GenerateSystemReset PROC
;;;408    *******************************************************************************/
;;;409    void NVIC_GenerateSystemReset(void)
000000  4902              LDR      r1,|L6.12|
;;;410    {
;;;411      SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
000002  4801              LDR      r0,|L6.8|
000004  6008              STR      r0,[r1,#0]
;;;412    }
000006  4770              BX       lr
;;;413    
                          ENDP

                  |L6.8|
                          DCD      0x05fa0004
                  |L6.12|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_GetBASEPRI||, CODE, READONLY, ALIGN=1

                  NVIC_GetBASEPRI PROC
;;;248    *******************************************************************************/
;;;249    u32 NVIC_GetBASEPRI(void)
000000  f7ffbffe          B.W      __GetBASEPRI
;;;250    {
;;;251      return (__GetBASEPRI());
;;;252    }
;;;253    
                          ENDP


                          AREA ||i.NVIC_GetCPUID||, CODE, READONLY, ALIGN=2

                  NVIC_GetCPUID PROC
;;;374    *******************************************************************************/
;;;375    u32 NVIC_GetCPUID(void)
000000  4801              LDR      r0,|L8.8|
;;;376    {
;;;377      return (SCB->CPUID);
000002  6800              LDR      r0,[r0,#0]
;;;378    }
000004  4770              BX       lr
;;;379    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0xe000ed00

                          AREA ||i.NVIC_GetCurrentActiveHandler||, CODE, READONLY, ALIGN=2

                  NVIC_GetCurrentActiveHandler PROC
;;;332    *******************************************************************************/
;;;333    u16 NVIC_GetCurrentActiveHandler(void)
000000  4802              LDR      r0,|L9.12|
;;;334    {
;;;335      return ((u16)(SCB->ICSR & (u32)0x3FF));
000002  6800              LDR      r0,[r0,#0]
000004  f3c00009          UBFX     r0,r0,#0,#10
;;;336    }
000008  4770              BX       lr
;;;337    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0xe000ed04

                          AREA ||i.NVIC_GetCurrentPendingIRQChannel||, CODE, READONLY, ALIGN=2

                  NVIC_GetCurrentPendingIRQChannel PROC
;;;260    *******************************************************************************/
;;;261    u16 NVIC_GetCurrentPendingIRQChannel(void)
000000  4802              LDR      r0,|L10.12|
;;;262    {
;;;263      return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
000002  6800              LDR      r0,[r0,#0]
000004  f3c03009          UBFX     r0,r0,#12,#10
;;;264    }
000008  4770              BX       lr
;;;265    
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0xe000ed04

                          AREA ||i.NVIC_GetFaultAddress||, CODE, READONLY, ALIGN=2

                  NVIC_GetFaultAddress PROC
;;;729    *******************************************************************************/
;;;730    u32 NVIC_GetFaultAddress(u32 SystemHandler)
000000  f3c05080          UBFX     r0,r0,#22,#1
;;;731    {
;;;732      u32 faultaddress = 0x00;
;;;733      u32 tmp = 0x00;
;;;734    
;;;735      /* Check the parameters */
;;;736      assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
;;;737      
;;;738      tmp = (SystemHandler >> 0x16) & (u32)0x01;
;;;739    
;;;740      if (tmp == 0x00)
000004  2800              CMP      r0,#0
;;;741      {
;;;742        faultaddress = SCB->MMFAR;
000006  bf0c              ITE      EQ
000008  4801              LDREQ    r0,|L11.16|
;;;743      }
;;;744      else
;;;745      {
;;;746        faultaddress = SCB->BFAR;
00000a  4802              LDRNE    r0,|L11.20|
00000c  6800              LDR      r0,[r0,#0]            ;742
;;;747      }
;;;748      return faultaddress;
;;;749    }
00000e  4770              BX       lr
;;;750    
                          ENDP

                  |L11.16|
                          DCD      0xe000ed34
                  |L11.20|
                          DCD      0xe000ed38

                          AREA ||i.NVIC_GetFaultHandlerSources||, CODE, READONLY, ALIGN=2

                  NVIC_GetFaultHandlerSources PROC
;;;683    *******************************************************************************/
;;;684    u32 NVIC_GetFaultHandlerSources(u32 SystemHandler)
000000  f3c04181          UBFX     r1,r0,#18,#2
;;;685    {
;;;686      u32 faultsources = 0x00;
;;;687      u32 tmpreg = 0x00, tmppos = 0x00;
;;;688    
;;;689      /* Check the parameters */
;;;690      assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
;;;691      
;;;692      tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
;;;693      tmppos = (SystemHandler >> 0x14) & (u32)0x03;
000004  f3c05001          UBFX     r0,r0,#20,#2
;;;694    
;;;695      if (tmpreg == 0x00)
000008  2900              CMP      r1,#0
;;;696      {
;;;697        faultsources = SCB->HFSR;
00000a  bf08              IT       EQ
00000c  4808              LDREQ    r0,|L12.48|
00000e  d003              BEQ      |L12.24|
;;;698      }
;;;699      else if (tmpreg == 0x01)
000010  2901              CMP      r1,#1
;;;700      {
;;;701        faultsources = SCB->CFSR >> (tmppos * 0x08);
;;;702        if (tmppos != 0x02)
;;;703        {
;;;704          faultsources &= (u32)0x0F;
;;;705        }
;;;706        else
;;;707        {
;;;708          faultsources &= (u32)0xFF;
;;;709        }
;;;710      }
;;;711      else
;;;712      {
;;;713        faultsources = SCB->DFSR;
000012  bf18              IT       NE
000014  4807              LDRNE    r0,|L12.52|
000016  d001              BEQ      |L12.28|
                  |L12.24|
000018  6800              LDR      r0,[r0,#0]            ;697
;;;714      }
;;;715      return faultsources;
;;;716    }
00001a  4770              BX       lr
                  |L12.28|
00001c  4906              LDR      r1,|L12.56|
00001e  6809              LDR      r1,[r1,#0]            ;701
000020  00c2              LSLS     r2,r0,#3              ;701
000022  40d1              LSRS     r1,r1,r2              ;701
000024  2802              CMP      r0,#2                 ;702
000026  bf14              ITE      NE                    ;704
000028  f001000f          ANDNE    r0,r1,#0xf            ;704
00002c  b2c8              UXTBEQ   r0,r1                 ;708
00002e  4770              BX       lr
;;;717    
                          ENDP

                  |L12.48|
                          DCD      0xe000ed2c
                  |L12.52|
                          DCD      0xe000ed30
                  |L12.56|
                          DCD      0xe000ed28

                          AREA ||i.NVIC_GetIRQChannelActiveBitStatus||, CODE, READONLY, ALIGN=1

                  NVIC_GetIRQChannelActiveBitStatus PROC
;;;345    *******************************************************************************/
;;;346    ITStatus NVIC_GetIRQChannelActiveBitStatus(u8 NVIC_IRQChannel)
000000  f000021f          AND      r2,r0,#0x1f
;;;347    {
;;;348      ITStatus activeirqstatus = RESET;
;;;349      u32 tmp = 0x00;
;;;350    
;;;351      /* Check the parameters */
;;;352      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;353      
;;;354      tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
000004  2301              MOVS     r3,#1
000006  fa03f202          LSL      r2,r3,r2
00000a  2100              MOVS     r1,#0                 ;348
;;;355    
;;;356      if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
00000c  0940              LSRS     r0,r0,#5
00000e  0080              LSLS     r0,r0,#2
000010  f10020e0          ADD      r0,r0,#0xe000e000
000014  f8d00300          LDR      r0,[r0,#0x300]
000018  ea320000          BICS     r0,r2,r0
;;;357      {
;;;358        activeirqstatus = SET;
00001c  bf08              IT       EQ
00001e  2101              MOVEQ    r1,#1
;;;359      }
;;;360      else
;;;361      {
;;;362        activeirqstatus = RESET;
;;;363      }
;;;364      return activeirqstatus;
000020  4608              MOV      r0,r1
;;;365    }
000022  4770              BX       lr
;;;366    
                          ENDP


                          AREA ||i.NVIC_GetIRQChannelPendingBitStatus||, CODE, READONLY, ALIGN=1

                  NVIC_GetIRQChannelPendingBitStatus PROC
;;;273    *******************************************************************************/
;;;274    ITStatus NVIC_GetIRQChannelPendingBitStatus(u8 NVIC_IRQChannel)
000000  f000021f          AND      r2,r0,#0x1f
;;;275    {
;;;276      ITStatus pendingirqstatus = RESET;
;;;277      u32 tmp = 0x00;
;;;278      
;;;279      /* Check the parameters */
;;;280      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;281      
;;;282      tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
000004  2301              MOVS     r3,#1
000006  fa03f202          LSL      r2,r3,r2
00000a  2100              MOVS     r1,#0                 ;276
;;;283    
;;;284      if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
00000c  0940              LSRS     r0,r0,#5
00000e  0080              LSLS     r0,r0,#2
000010  f10020e0          ADD      r0,r0,#0xe000e000
000014  f8d00200          LDR      r0,[r0,#0x200]
000018  ea320000          BICS     r0,r2,r0
;;;285      {
;;;286        pendingirqstatus = SET;
00001c  bf08              IT       EQ
00001e  2101              MOVEQ    r1,#1
;;;287      }
;;;288      else
;;;289      {
;;;290        pendingirqstatus = RESET;
;;;291      }
;;;292      return pendingirqstatus;
000020  4608              MOV      r0,r1
;;;293    }
000022  4770              BX       lr
;;;294    
                          ENDP


                          AREA ||i.NVIC_GetSystemHandlerActiveBitStatus||, CODE, READONLY, ALIGN=2

                  NVIC_GetSystemHandlerActiveBitStatus PROC
;;;643    *******************************************************************************/
;;;644    ITStatus NVIC_GetSystemHandlerActiveBitStatus(u32 SystemHandler)
000000  4601              MOV      r1,r0
;;;645    {
;;;646      ITStatus bitstatus  = RESET;
000002  2000              MOVS     r0,#0
;;;647    
;;;648      u32 tmp = 0x00, tmppos = 0x00;
;;;649    
;;;650      /* Check the parameters */
;;;651      assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
;;;652      
;;;653      tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;
000004  f3c13183          UBFX     r1,r1,#14,#4
;;;654    
;;;655      tmppos = (u32)0x01 << tmppos;
000008  2201              MOVS     r2,#1
00000a  fa02f101          LSL      r1,r2,r1
;;;656    
;;;657      tmp = SCB->SHCSR & tmppos;
00000e  4a03              LDR      r2,|L15.28|
000010  6812              LDR      r2,[r2,#0]
000012  400a              ANDS     r2,r2,r1
;;;658    
;;;659      if (tmp == tmppos)
000014  428a              CMP      r2,r1
;;;660      {
;;;661        bitstatus = SET;
000016  bf08              IT       EQ
000018  2001              MOVEQ    r0,#1
;;;662      }
;;;663      else
;;;664      {
;;;665        bitstatus = RESET;
;;;666      }
;;;667      return bitstatus;
;;;668    }
00001a  4770              BX       lr
;;;669    
                          ENDP

                  |L15.28|
                          DCD      0xe000ed24

                          AREA ||i.NVIC_GetSystemHandlerPendingBitStatus||, CODE, READONLY, ALIGN=2

                  NVIC_GetSystemHandlerPendingBitStatus PROC
;;;551    *******************************************************************************/
;;;552    ITStatus NVIC_GetSystemHandlerPendingBitStatus(u32 SystemHandler)
000000  4601              MOV      r1,r0
;;;553    {
;;;554      ITStatus bitstatus  = RESET;
000002  2000              MOVS     r0,#0
;;;555      u32 tmp = 0x00, tmppos = 0x00;
;;;556    
;;;557      /* Check the parameters */
;;;558      assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
;;;559      
;;;560      tmppos = (SystemHandler >> 0x0A);
;;;561      tmppos &= (u32)0x0F;
000004  f3c12183          UBFX     r1,r1,#10,#4
;;;562    
;;;563      tmppos = (u32)0x01 << tmppos;
000008  2201              MOVS     r2,#1
00000a  fa02f101          LSL      r1,r2,r1
;;;564    
;;;565      tmp = SCB->SHCSR & tmppos;
00000e  4a03              LDR      r2,|L16.28|
000010  6812              LDR      r2,[r2,#0]
000012  400a              ANDS     r2,r2,r1
;;;566    
;;;567      if (tmp == tmppos)
000014  428a              CMP      r2,r1
;;;568      {
;;;569        bitstatus = SET;
000016  bf08              IT       EQ
000018  2001              MOVEQ    r0,#1
;;;570      }
;;;571      else
;;;572      {
;;;573        bitstatus = RESET;
;;;574      }
;;;575      return bitstatus;
;;;576    }
00001a  4770              BX       lr
;;;577    
                          ENDP

                  |L16.28|
                          DCD      0xe000ed24

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;115    *******************************************************************************/
;;;116    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b430              PUSH     {r4,r5}
;;;117    {
;;;118      u32 tmppriority = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;119      u32 tmppre = 0, tmpsub = 0x0F;
;;;120    
;;;121      /* Check the parameters */
;;;122      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;123      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
;;;124      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;125      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;126        
;;;127      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000002  78c2              LDRB     r2,[r0,#3]
;;;128      {
;;;129        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;130        tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
;;;131        tmppre = (0x4 - tmppriority);
;;;132        tmpsub = tmpsub >> tmppriority;
;;;133        
;;;134        tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;135        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
;;;136    
;;;137        tmppriority = tmppriority << 0x04;
;;;138        tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
000004  7801              LDRB     r1,[r0,#0]
000006  f04f0c0f          MOV      r12,#0xf              ;119
;;;139        
;;;140        tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
;;;141        tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
;;;142        tmpreg &= ~tmpmask;
;;;143        tmppriority &= tmpmask;  
;;;144        tmpreg |= tmppriority;
;;;145    
;;;146        NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
;;;147        
;;;148        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;149        NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
00000a  2501              MOVS     r5,#1
00000c  b3a2              CBZ      r2,|L17.120|
00000e  4a21              LDR      r2,|L17.148|
000010  6812              LDR      r2,[r2,#0]            ;130
000012  f40262e0          AND      r2,r2,#0x700          ;130
000016  f5c262e0          RSB      r2,r2,#0x700          ;130
00001a  0a12              LSRS     r2,r2,#8              ;130
00001c  f1c20304          RSB      r3,r2,#4              ;131
000020  fa2cf202          LSR      r2,r12,r2             ;132
000024  f890c001          LDRB     r12,[r0,#1]           ;134
000028  fa0cf303          LSL      r3,r12,r3             ;134
00002c  f890c002          LDRB     r12,[r0,#2]           ;135
000030  ea0c0202          AND      r2,r12,r2             ;135
000034  431a              ORRS     r2,r2,r3              ;135
000036  0113              LSLS     r3,r2,#4              ;137
000038  078a              LSLS     r2,r1,#30             ;138
00003a  0ed2              LSRS     r2,r2,#27             ;138
00003c  fa03fc02          LSL      r12,r3,r2             ;138
000040  f0210103          BIC      r1,r1,#3              ;140
000044  f10123e0          ADD      r3,r1,#0xe000e000     ;140
000048  f8d34400          LDR      r4,[r3,#0x400]        ;140
00004c  21ff              MOVS     r1,#0xff              ;141
00004e  4091              LSLS     r1,r1,r2              ;141
000050  ea240201          BIC      r2,r4,r1              ;142
000054  ea0c0101          AND      r1,r12,r1             ;143
000058  4311              ORRS     r1,r1,r2              ;144
00005a  f8c31400          STR      r1,[r3,#0x400]        ;146
00005e  7800              LDRB     r0,[r0,#0]
000060  f000011f          AND      r1,r0,#0x1f
000064  fa05f101          LSL      r1,r5,r1
000068  0940              LSRS     r0,r0,#5
00006a  0080              LSLS     r0,r0,#2
00006c  f10020e0          ADD      r0,r0,#0xe000e000
000070  f8c01100          STR      r1,[r0,#0x100]
;;;150          (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
;;;151      }
;;;152      else
;;;153      {
;;;154        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;155        NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
;;;156          (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
;;;157      }
;;;158    }
000074  bc30              POP      {r4,r5}
000076  4770              BX       lr
                  |L17.120|
000078  e7ff              B        |L17.122|
                  |L17.122|
00007a  f001001f          AND      r0,r1,#0x1f           ;155
00007e  fa05f000          LSL      r0,r5,r0              ;155
000082  0949              LSRS     r1,r1,#5              ;155
000084  0089              LSLS     r1,r1,#2              ;155
000086  f10121e0          ADD      r1,r1,#0xe000e000     ;155
00008a  f8c10180          STR      r0,[r1,#0x180]        ;155
00008e  bc30              POP      {r4,r5}
000090  4770              BX       lr
;;;159    
                          ENDP

000092  0000              DCW      0x0000
                  |L17.148|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;96     *******************************************************************************/
;;;97     void NVIC_PriorityGroupConfig(u32 NVIC_PriorityGroup)
000000  4903              LDR      r1,|L18.16|
;;;98     {
;;;99       /* Check the parameters */
;;;100      assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;101      
;;;102      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;103      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  f04070fd          ORR      r0,r0,#0x1fa0000
000006  f0406080          ORR      r0,r0,#0x4000000
00000a  6008              STR      r0,[r1,#0]
;;;104    }
00000c  4770              BX       lr
;;;105    
                          ENDP

00000e  0000              DCW      0x0000
                  |L18.16|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_RESETFAULTMASK||, CODE, READONLY, ALIGN=1

                  NVIC_RESETFAULTMASK PROC
;;;219    *******************************************************************************/
;;;220    void NVIC_RESETFAULTMASK(void)
000000  f7ffbffe          B.W      __RESETFAULTMASK
;;;221    {
;;;222      __RESETFAULTMASK();
;;;223    }
;;;224    
                          ENDP


                          AREA ||i.NVIC_RESETPRIMASK||, CODE, READONLY, ALIGN=1

                  NVIC_RESETPRIMASK PROC
;;;195    *******************************************************************************/
;;;196    void NVIC_RESETPRIMASK(void)
000000  f7ffbffe          B.W      __RESETPRIMASK
;;;197    {
;;;198      __RESETPRIMASK();
;;;199    }
;;;200    
                          ENDP


                          AREA ||i.NVIC_SCBDeInit||, CODE, READONLY, ALIGN=2

                  NVIC_SCBDeInit PROC
;;;58     *******************************************************************************/
;;;59     void NVIC_SCBDeInit(void)
000000  4910              LDR      r1,|L21.68|
;;;60     {
;;;61       u32 index = 0x00;
;;;62       
;;;63       SCB->ICSR = 0x0A000000;
000002  f04f6220          MOV      r2,#0xa000000
000006  2000              MOVS     r0,#0                 ;61
000008  600a              STR      r2,[r1,#0]
;;;64       SCB->VTOR = 0x00000000;
00000a  4a0f              LDR      r2,|L21.72|
00000c  4601              MOV      r1,r0
00000e  6010              STR      r0,[r2,#0]
;;;65       SCB->AIRCR = AIRCR_VECTKEY_MASK;
000010  4b0f              LDR      r3,|L21.80|
000012  4a0e              LDR      r2,|L21.76|
000014  601a              STR      r2,[r3,#0]
;;;66       SCB->SCR = 0x00000000;
000016  1d1a              ADDS     r2,r3,#4
000018  6010              STR      r0,[r2,#0]
;;;67       SCB->CCR = 0x00000000;
00001a  1d12              ADDS     r2,r2,#4
00001c  6010              STR      r0,[r2,#0]
                  |L21.30|
;;;68       for(index = 0; index < 0x03; index++)
;;;69       {
;;;70          SCB->SHPR[index] = 0;
00001e  0082              LSLS     r2,r0,#2
000020  f10222e0          ADD      r2,r2,#0xe000e000
000024  f8c21d18          STR      r1,[r2,#0xd18]
000028  1c40              ADDS     r0,r0,#1
00002a  2803              CMP      r0,#3                 ;68
00002c  d3f7              BCC      |L21.30|
;;;71       }
;;;72       SCB->SHCSR = 0x00000000;
00002e  4809              LDR      r0,|L21.84|
000030  6001              STR      r1,[r0,#0]
;;;73       SCB->CFSR = 0xFFFFFFFF;
000032  4909              LDR      r1,|L21.88|
000034  1740              ASRS     r0,r0,#29
000036  6008              STR      r0,[r1,#0]
;;;74       SCB->HFSR = 0xFFFFFFFF;
000038  1d09              ADDS     r1,r1,#4
00003a  6008              STR      r0,[r1,#0]
;;;75       SCB->DFSR = 0xFFFFFFFF;
00003c  1d09              ADDS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;76     }
000040  4770              BX       lr
;;;77     
                          ENDP

000042  0000              DCW      0x0000
                  |L21.68|
                          DCD      0xe000ed04
                  |L21.72|
                          DCD      0xe000ed08
                  |L21.76|
                          DCD      0x05fa0000
                  |L21.80|
                          DCD      0xe000ed0c
                  |L21.84|
                          DCD      0xe000ed24
                  |L21.88|
                          DCD      0xe000ed28

                          AREA ||i.NVIC_SETFAULTMASK||, CODE, READONLY, ALIGN=1

                  NVIC_SETFAULTMASK PROC
;;;207    *******************************************************************************/
;;;208    void NVIC_SETFAULTMASK(void)
000000  f7ffbffe          B.W      __SETFAULTMASK
;;;209    {
;;;210      __SETFAULTMASK();
;;;211    }
;;;212    
                          ENDP


                          AREA ||i.NVIC_SETPRIMASK||, CODE, READONLY, ALIGN=1

                  NVIC_SETPRIMASK PROC
;;;183    *******************************************************************************/
;;;184    void NVIC_SETPRIMASK(void)
000000  f7ffbffe          B.W      __SETPRIMASK
;;;185    {
;;;186      __SETPRIMASK();
;;;187    }
;;;188    
                          ENDP


                          AREA ||i.NVIC_SetIRQChannelPendingBit||, CODE, READONLY, ALIGN=2

                  NVIC_SetIRQChannelPendingBit PROC
;;;301    *******************************************************************************/
;;;302    void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
000000  4901              LDR      r1,|L24.8|
;;;303    {
;;;304      /* Check the parameters */
;;;305      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;306      
;;;307      *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
000002  6008              STR      r0,[r1,#0]
;;;308    }
000004  4770              BX       lr
;;;309    
                          ENDP

000006  0000              DCW      0x0000
                  |L24.8|
                          DCD      0xe000ef00

                          AREA ||i.NVIC_SetSystemHandlerPendingBit||, CODE, READONLY, ALIGN=2

                  NVIC_SetSystemHandlerPendingBit PROC
;;;589    *******************************************************************************/
;;;590    void NVIC_SetSystemHandlerPendingBit(u32 SystemHandler)
000000  4904              LDR      r1,|L25.20|
;;;591    {
;;;592      u32 tmp = 0x00;
;;;593    
;;;594      /* Check the parameters */
;;;595      assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
;;;596      
;;;597      /* Get the System Handler pending bit position */
;;;598      tmp = SystemHandler & (u32)0x1F;
000002  f000001f          AND      r0,r0,#0x1f
;;;599      /* Set the corresponding System Handler pending bit */
;;;600      SCB->ICSR |= ((u32)0x01 << tmp);
000006  680a              LDR      r2,[r1,#0]
000008  2301              MOVS     r3,#1
00000a  fa03f000          LSL      r0,r3,r0
00000e  4310              ORRS     r0,r0,r2
000010  6008              STR      r0,[r1,#0]
;;;601    }
000012  4770              BX       lr
;;;602    
                          ENDP

                  |L25.20|
                          DCD      0xe000ed04

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;392    *******************************************************************************/
;;;393    void NVIC_SetVectorTable(u32 NVIC_VectTab, u32 Offset)
000000  f021017f          BIC      r1,r1,#0x7f
;;;394    { 
;;;395      /* Check the parameters */
;;;396      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;397      assert_param(IS_NVIC_OFFSET(Offset));  
;;;398       
;;;399      SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
000004  f0214160          BIC      r1,r1,#0xe0000000
000008  4308              ORRS     r0,r0,r1
00000a  4901              LDR      r1,|L26.16|
00000c  6008              STR      r0,[r1,#0]
;;;400    }
00000e  4770              BX       lr
;;;401    
                          ENDP

                  |L26.16|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_StructInit||, CODE, READONLY, ALIGN=1

                  NVIC_StructInit PROC
;;;167    *******************************************************************************/
;;;168    void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
000000  2100              MOVS     r1,#0
;;;169    {
;;;170      /* NVIC_InitStruct members default value */
;;;171      NVIC_InitStruct->NVIC_IRQChannel = 0x00;
000002  7001              STRB     r1,[r0,#0]
;;;172      NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
000004  7041              STRB     r1,[r0,#1]
;;;173      NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
000006  7081              STRB     r1,[r0,#2]
;;;174      NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
000008  70c1              STRB     r1,[r0,#3]
;;;175    }
00000a  4770              BX       lr
;;;176    
                          ENDP


                          AREA ||i.NVIC_SystemHandlerConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemHandlerConfig PROC
;;;469    *******************************************************************************/
;;;470    void NVIC_SystemHandlerConfig(u32 SystemHandler, FunctionalState NewState)
000000  f000021f          AND      r2,r0,#0x1f
;;;471    {
;;;472      u32 tmpreg = 0x00;
;;;473    
;;;474      /* Check the parameters */
;;;475      assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
;;;476      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;477      
;;;478      tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
000004  2001              MOVS     r0,#1
000006  4090              LSLS     r0,r0,r2
;;;479    
;;;480      if (NewState != DISABLE)
;;;481      {
;;;482        SCB->SHCSR |= tmpreg;
000008  4a04              LDR      r2,|L28.28|
00000a  2900              CMP      r1,#0                 ;480
;;;483      }
;;;484      else
;;;485      {
;;;486        SCB->SHCSR &= ~tmpreg;
00000c  6811              LDR      r1,[r2,#0]
00000e  bf14              ITE      NE                    ;482
000010  4308              ORRNE    r0,r0,r1              ;482
000012  ea210000          BICEQ    r0,r1,r0
000016  6010              STR      r0,[r2,#0]            ;482
;;;487      }
;;;488    }
000018  4770              BX       lr
;;;489    
                          ENDP

00001a  0000              DCW      0x0000
                  |L28.28|
                          DCD      0xe000ed24

                          AREA ||i.NVIC_SystemHandlerPriorityConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemHandlerPriorityConfig PROC
;;;509    *******************************************************************************/
;;;510    void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
000000  4b14              LDR      r3,|L29.84|
;;;511                                          u8 SystemHandlerSubPriority)
;;;512    {
000002  b410              PUSH     {r4}
;;;513      u32 tmp1 = 0x00, tmp2 = 0xFF, handlermask = 0x00;
;;;514      u32 tmppriority = 0x00;
;;;515    
;;;516      /* Check the parameters */
;;;517      assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
;;;518      assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
;;;519      assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
;;;520        
;;;521      tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
000004  681b              LDR      r3,[r3,#0]
000006  24ff              MOVS     r4,#0xff              ;513
000008  f40363e0          AND      r3,r3,#0x700
00000c  f5c363e0          RSB      r3,r3,#0x700
000010  0a1b              LSRS     r3,r3,#8
;;;522      tmp1 = (0x4 - tmppriority);
000012  f1c30c04          RSB      r12,r3,#4
;;;523      tmp2 = tmp2 >> tmppriority;
000016  fa24f303          LSR      r3,r4,r3
;;;524        
;;;525      tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
;;;526      tmppriority |=  SystemHandlerSubPriority & tmp2;
00001a  401a              ANDS     r2,r2,r3
00001c  fa01f10c          LSL      r1,r1,r12             ;525
000020  4311              ORRS     r1,r1,r2
;;;527    
;;;528      tmppriority = tmppriority << 0x04;
000022  010a              LSLS     r2,r1,#4
;;;529      tmp1 = SystemHandler & (u32)0xC0;
;;;530      tmp1 = tmp1 >> 0x06; 
;;;531      tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
;;;532      tmppriority = tmppriority << (tmp2 * 0x08);
;;;533      handlermask = (u32)0xFF << (tmp2 * 0x08);
;;;534      
;;;535      SCB->SHPR[tmp1] &= ~handlermask;
;;;536      SCB->SHPR[tmp1] |= tmppriority;
;;;537    }
000024  2103              MOVS     r1,#3
000026  ea011190          AND      r1,r1,r0,LSR #6
00002a  f3c02001          UBFX     r0,r0,#8,#2           ;531
00002e  00c0              LSLS     r0,r0,#3              ;532
000030  4082              LSLS     r2,r2,r0              ;532
000032  23ff              MOVS     r3,#0xff              ;533
000034  4083              LSLS     r3,r3,r0              ;533
000036  0088              LSLS     r0,r1,#2              ;535
000038  f10020e0          ADD      r0,r0,#0xe000e000     ;535
00003c  f8d01d18          LDR      r1,[r0,#0xd18]        ;535
000040  4399              BICS     r1,r1,r3              ;535
000042  f8c01d18          STR      r1,[r0,#0xd18]        ;535
000046  f8d01d18          LDR      r1,[r0,#0xd18]        ;536
00004a  4311              ORRS     r1,r1,r2              ;536
00004c  f8c01d18          STR      r1,[r0,#0xd18]        ;536
000050  bc10              POP      {r4}
000052  4770              BX       lr
;;;538    
                          ENDP

                  |L29.84|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;439    *******************************************************************************/
;;;440    void NVIC_SystemLPConfig(u8 LowPowerMode, FunctionalState NewState)
000000  4a04              LDR      r2,|L30.20|
;;;441    {
;;;442      /* Check the parameters */
;;;443      assert_param(IS_NVIC_LP(LowPowerMode));
;;;444      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;445      
;;;446      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;447      {
;;;448        SCB->SCR |= LowPowerMode;
;;;449      }
;;;450      else
;;;451      {
;;;452        SCB->SCR &= (u32)(~(u32)LowPowerMode);
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;448
000008  4308              ORRNE    r0,r0,r1              ;448
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;448
;;;453      }
;;;454    }
000010  4770              BX       lr
;;;455    
                          ENDP

000012  0000              DCW      0x0000
                  |L30.20|
                          DCD      0xe000ed10
