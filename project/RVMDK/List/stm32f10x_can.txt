; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_can.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_can.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I..\..\project -I..\..\library\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=517 -DVECT_TAB_FLASH --omf_browse=.\obj\stm32f10x_can.crf ..\..\library\src\stm32f10x_can.c]
                          THUMB

                          AREA ||i.CAN_CancelTransmit||, CODE, READONLY, ALIGN=2

                  CAN_CancelTransmit PROC
;;;539    *******************************************************************************/
;;;540    void CAN_CancelTransmit(u8 Mailbox)
000000  490a              LDR      r1,|L1.44|
;;;541    {
000002  b168              CBZ      r0,|L1.32|
;;;542      /* Check the parameters */
;;;543      assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
;;;544    
;;;545      /* abort transmission */
;;;546      switch (Mailbox)
000004  2801              CMP      r0,#1
;;;547      {
;;;548        case (0): CAN->TSR |= TSR_ABRQ0;
;;;549          break;
;;;550        case (1): CAN->TSR |= TSR_ABRQ1;
000006  bf04              ITT      EQ
000008  6808              LDREQ    r0,[r1,#0]
00000a  f4404000          ORREQ    r0,r0,#0x8000
00000e  d005              BEQ      |L1.28|
000010  2802              CMP      r0,#2                 ;546
;;;551          break;
;;;552        case (2): CAN->TSR |= TSR_ABRQ2;
000012  bf06              ITTE     EQ
000014  6808              LDREQ    r0,[r1,#0]
000016  f4400000          ORREQ    r0,r0,#0x800000
;;;553          break;
;;;554        default:
;;;555          break;
;;;556      }
;;;557    }
00001a  4770              BXNE     lr
                  |L1.28|
00001c  6008              STR      r0,[r1,#0]            ;552
00001e  4770              BX       lr
                  |L1.32|
000020  6808              LDR      r0,[r1,#0]            ;548
000022  f0400080          ORR      r0,r0,#0x80           ;548
000026  6008              STR      r0,[r1,#0]            ;548
000028  4770              BX       lr
;;;558    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x40006408

                          AREA ||i.CAN_ClearFlag||, CODE, READONLY, ALIGN=2

                  CAN_ClearFlag PROC
;;;749    *******************************************************************************/
;;;750    void CAN_ClearFlag(u32 CAN_FLAG)
000000  4902              LDR      r1,|L2.12|
;;;751    {
;;;752      /* Check the parameters */
;;;753      assert_param(IS_CAN_FLAG(CAN_FLAG));
;;;754    
;;;755      /* Clear the selected CAN flags */
;;;756      CAN->ESR &= ~CAN_FLAG;
000002  680a              LDR      r2,[r1,#0]
000004  ea220000          BIC      r0,r2,r0
000008  6008              STR      r0,[r1,#0]
;;;757    }
00000a  4770              BX       lr
;;;758    
                          ENDP

                  |L2.12|
                          DCD      0x40006418

                          AREA ||i.CAN_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  CAN_ClearITPendingBit PROC
;;;832    *******************************************************************************/
;;;833    void CAN_ClearITPendingBit(u32 CAN_IT)
000000  b410              PUSH     {r4}
;;;834    {
;;;835      /* Check the parameters */
;;;836      assert_param(IS_CAN_ITStatus(CAN_IT));
;;;837    
;;;838      switch (CAN_IT)
;;;839      {
;;;840        case CAN_IT_RQCP0:
;;;841          CAN->TSR = TSR_RQCP0; /* rc_w1*/
;;;842          break;
;;;843        case CAN_IT_RQCP1:
;;;844          CAN->TSR = TSR_RQCP1; /* rc_w1*/
;;;845          break;
;;;846        case CAN_IT_RQCP2:
;;;847          CAN->TSR = TSR_RQCP2; /* rc_w1*/
;;;848          break;
;;;849        case CAN_IT_FF0:
;;;850          CAN->RF0R = RF0R_FULL0; /* rc_w1*/
000002  2308              MOVS     r3,#8
;;;851          break;
;;;852        case CAN_IT_FOV0:
;;;853          CAN->RF0R = RF0R_FOVR0; /* rc_w1*/
;;;854          break;
;;;855        case CAN_IT_FF1:
;;;856          CAN->RF1R = RF1R_FULL1; /* rc_w1*/
000004  4c2b              LDR      r4,|L3.180|
000006  f04f0c10          MOV      r12,#0x10             ;853
00000a  2840              CMP      r0,#0x40              ;838
;;;857          break;
;;;858        case CAN_IT_FOV1:
;;;859          CAN->RF1R = RF1R_FOVR1; /* rc_w1*/
00000c  bf02              ITTT     EQ
00000e  f8c4c000          STREQ    r12,[r4,#0]
;;;860          break;
;;;861        case CAN_IT_EWG:
;;;862          CAN->ESR &= ~ ESR_EWGF; /* rw */
;;;863          break;
;;;864        case CAN_IT_EPV:
;;;865          CAN->ESR &= ~ ESR_EPVF; /* rw */
;;;866          break;
;;;867        case CAN_IT_BOF:
;;;868          CAN->ESR &= ~ ESR_BOFF; /* rw */
;;;869          break;
;;;870        case CAN_IT_WKU:
;;;871          CAN->MSR = MSR_WKUI;  /* rc_w1*/
;;;872          break;
;;;873        case CAN_IT_SLK:
;;;874          CAN->MSR = MSR_SLAKI;  /* rc_w1*/
;;;875          break;
;;;876        default :
;;;877          break;
;;;878      }
;;;879    }
000012  bc10              POPEQ    {r4}
000014  4770              BXEQ     lr
000016  dc25              BGT      |L3.100|
000018  4927              LDR      r1,|L3.184|
00001a  2807              CMP      r0,#7                 ;838
00001c  f1010204          ADD      r2,r1,#4              ;850
000020  bf08              IT       EQ                    ;847
000022  f44f3080          MOVEQ    r0,#0x10000           ;847
000026  d00f              BEQ      |L3.72|
000028  dc11              BGT      |L3.78|
00002a  2804              CMP      r0,#4                 ;838
00002c  bf02              ITTT     EQ                    ;850
00002e  6013              STREQ    r3,[r2,#0]            ;850
000030  bc10              POPEQ    {r4}
000032  4770              BXEQ     lr
000034  2805              CMP      r0,#5                 ;838
000036  bf08              IT       EQ                    ;841
000038  2001              MOVEQ    r0,#1                 ;841
00003a  d005              BEQ      |L3.72|
00003c  2806              CMP      r0,#6                 ;838
00003e  bf0e              ITEE     EQ                    ;844
000040  f44f7080          MOVEQ    r0,#0x100             ;844
000044  bc10              POPNE    {r4}
000046  4770              BXNE     lr
                  |L3.72|
000048  6008              STR      r0,[r1,#0]            ;844
00004a  bc10              POP      {r4}
00004c  4770              BX       lr
                  |L3.78|
00004e  2808              CMP      r0,#8                 ;838
000050  bf02              ITTT     EQ                    ;853
000052  f8c2c000          STREQ    r12,[r2,#0]           ;853
000056  bc10              POPEQ    {r4}
000058  4770              BXEQ     lr
00005a  2820              CMP      r0,#0x20              ;838
00005c  bf08              IT       EQ                    ;856
00005e  6023              STREQ    r3,[r4,#0]            ;856
000060  bc10              POP      {r4}
000062  4770              BX       lr
                  |L3.100|
000064  4915              LDR      r1,|L3.188|
000066  f5b06f80          CMP      r0,#0x400             ;838
00006a  bf04              ITT      EQ                    ;868
00006c  6808              LDREQ    r0,[r1,#0]            ;868
00006e  f0200004          BICEQ    r0,r0,#4              ;868
000072  d0e9              BEQ      |L3.72|
000074  dc0f              BGT      |L3.150|
000076  f5b07f80          CMP      r0,#0x100             ;838
00007a  bf04              ITT      EQ                    ;862
00007c  6808              LDREQ    r0,[r1,#0]            ;862
00007e  f0200001          BICEQ    r0,r0,#1              ;862
000082  d0e1              BEQ      |L3.72|
000084  f5b07f00          CMP      r0,#0x200             ;838
000088  bf04              ITT      EQ                    ;865
00008a  6808              LDREQ    r0,[r1,#0]            ;865
00008c  f0200002          BICEQ    r0,r0,#2              ;865
000090  d0da              BEQ      |L3.72|
000092  bc10              POP      {r4}
000094  4770              BX       lr
                  |L3.150|
000096  490a              LDR      r1,|L3.192|
000098  f5b03f80          CMP      r0,#0x10000           ;838
00009c  bf02              ITTT     EQ                    ;871
00009e  600b              STREQ    r3,[r1,#0]            ;871
0000a0  bc10              POPEQ    {r4}
0000a2  4770              BXEQ     lr
0000a4  f5b03f00          CMP      r0,#0x20000           ;838
0000a8  bf08              IT       EQ                    ;874
0000aa  f8c1c000          STREQ    r12,[r1,#0]           ;874
0000ae  bc10              POP      {r4}
0000b0  4770              BX       lr
;;;880    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L3.180|
                          DCD      0x40006410
                  |L3.184|
                          DCD      0x40006408
                  |L3.188|
                          DCD      0x40006418
                  |L3.192|
                          DCD      0x40006404

                          AREA ||i.CAN_DeInit||, CODE, READONLY, ALIGN=1

                  CAN_DeInit PROC
;;;87     *******************************************************************************/
;;;88     void CAN_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;89     {
;;;90       /* Enable CAN reset state */
;;;91       RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, ENABLE);
000002  2101              MOVS     r1,#1
000004  0648              LSLS     r0,r1,#25
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;92       /* Release CAN from reset state */
;;;93       RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, DISABLE);
00000a  e8bd4010          POP      {r4,lr}
00000e  2100              MOVS     r1,#0
000010  f04f7000          MOV      r0,#0x2000000
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;94     }
;;;95     
                          ENDP


                          AREA ||i.CAN_FIFORelease||, CODE, READONLY, ALIGN=2

                  CAN_FIFORelease PROC
;;;565    *******************************************************************************/
;;;566    void CAN_FIFORelease(u8 FIFONumber)
000000  2120              MOVS     r1,#0x20
;;;567    {
;;;568      /* Check the parameters */
;;;569      assert_param(IS_CAN_FIFO(FIFONumber));
;;;570    
;;;571      /* Release FIFO0 */
;;;572      if (FIFONumber == CAN_FIFO0)
000002  2800              CMP      r0,#0
;;;573      {
;;;574        CAN->RF0R = RF0R_RFOM0;
000004  bf0c              ITE      EQ
000006  4802              LDREQ    r0,|L5.16|
;;;575      }
;;;576      /* Release FIFO1 */
;;;577      else /* FIFONumber == CAN_FIFO1 */
;;;578      {
;;;579        CAN->RF1R = RF1R_RFOM1;
000008  4802              LDRNE    r0,|L5.20|
00000a  6001              STR      r1,[r0,#0]            ;574
;;;580      }
;;;581    }
00000c  4770              BX       lr
;;;582    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x4000640c
                  |L5.20|
                          DCD      0x40006410

                          AREA ||i.CAN_FilterInit||, CODE, READONLY, ALIGN=2

                  CAN_FilterInit PROC
;;;228    *******************************************************************************/
;;;229    void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
000000  b430              PUSH     {r4,r5}
;;;230    {
;;;231      u16 FilterNumber_BitPos = 0;
;;;232    
;;;233      /* Check the parameters */
;;;234      assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
;;;235      assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
;;;236      assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
;;;237      assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
;;;238      assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
;;;239    
;;;240      FilterNumber_BitPos = 
000002  7802              LDRB     r2,[r0,#0]
;;;241      (u16)(((u16)0x0001) << ((u16)CAN_FilterInitStruct->CAN_FilterNumber));
;;;242    
;;;243      /* Initialisation mode for the filter */
;;;244      CAN->FMR |= FMR_FINIT;
000004  4b35              LDR      r3,|L6.220|
000006  2101              MOVS     r1,#1                 ;240
000008  4091              LSLS     r1,r1,r2              ;240
00000a  681a              LDR      r2,[r3,#0]
00000c  b289              UXTH     r1,r1                 ;240
00000e  f0420201          ORR      r2,r2,#1
000012  601a              STR      r2,[r3,#0]
;;;245    
;;;246      /* Filter Deactivation */
;;;247      CAN->FA1R &= ~(u32)FilterNumber_BitPos;
000014  f8dfc0c8          LDR      r12,|L6.224|
000018  f8dc2000          LDR      r2,[r12,#0]
00001c  438a              BICS     r2,r2,r1
00001e  f8cc2000          STR      r2,[r12,#0]
;;;248    
;;;249      /* Filter Scale */
;;;250      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
000022  7884              LDRB     r4,[r0,#2]
;;;251      {
;;;252        /* 16-bit scale for the filter */
;;;253        CAN->FS1R &= ~(u32)FilterNumber_BitPos;
000024  4a2f              LDR      r2,|L6.228|
000026  b9d4              CBNZ     r4,|L6.94|
000028  6814              LDR      r4,[r2,#0]
00002a  438c              BICS     r4,r4,r1
00002c  6014              STR      r4,[r2,#0]
;;;254    
;;;255        /* First 16-bit identifier and First 16-bit mask */
;;;256        /* Or First 16-bit identifier and Second 16-bit identifier */
;;;257        CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
00002e  88c4              LDRH     r4,[r0,#6]
000030  8945              LDRH     r5,[r0,#0xa]
000032  ea444405          ORR      r4,r4,r5,LSL #16
000036  7805              LDRB     r5,[r0,#0]
000038  00ed              LSLS     r5,r5,#3
00003a  f1054580          ADD      r5,r5,#0x40000000
00003e  f50545c0          ADD      r5,r5,#0x6000
000042  f8c54640          STR      r4,[r5,#0x640]
;;;258        ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
;;;259            ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);
;;;260    
;;;261        /* Second 16-bit identifier and Second 16-bit mask */
;;;262        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
;;;263        CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
000046  8884              LDRH     r4,[r0,#4]
000048  8905              LDRH     r5,[r0,#8]
00004a  ea444405          ORR      r4,r4,r5,LSL #16
00004e  7805              LDRB     r5,[r0,#0]
000050  00ed              LSLS     r5,r5,#3
000052  f1054580          ADD      r5,r5,#0x40000000
000056  f50545c0          ADD      r5,r5,#0x6000
00005a  f8c54644          STR      r4,[r5,#0x644]
                  |L6.94|
;;;264        ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;265            ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh);
;;;266      }
;;;267      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
00005e  7884              LDRB     r4,[r0,#2]
000060  2c01              CMP      r4,#1
000062  d118              BNE      |L6.150|
;;;268      {
;;;269        /* 32-bit scale for the filter */
;;;270        CAN->FS1R |= FilterNumber_BitPos;
000064  6814              LDR      r4,[r2,#0]
000066  430c              ORRS     r4,r4,r1
000068  6014              STR      r4,[r2,#0]
;;;271    
;;;272        /* 32-bit identifier or First 32-bit identifier */
;;;273        CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
00006a  7804              LDRB     r4,[r0,#0]
00006c  6842              LDR      r2,[r0,#4]
00006e  00e4              LSLS     r4,r4,#3
000070  f1044480          ADD      r4,r4,#0x40000000
000074  f50444c0          ADD      r4,r4,#0x6000
000078  ea4f4232          ROR      r2,r2,#16
00007c  f8c42640          STR      r2,[r4,#0x640]
;;;274        ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
;;;275            ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);
;;;276    
;;;277        /* 32-bit mask or Second 32-bit identifier */
;;;278        CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
000080  6882              LDR      r2,[r0,#8]
000082  ea4f4432          ROR      r4,r2,#16
000086  7802              LDRB     r2,[r0,#0]
000088  00d2              LSLS     r2,r2,#3
00008a  f1024280          ADD      r2,r2,#0x40000000
00008e  f50242c0          ADD      r2,r2,#0x6000
000092  f8c24644          STR      r4,[r2,#0x644]
                  |L6.150|
;;;279        ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;280            ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow);
;;;281    
;;;282      }
;;;283    
;;;284      /* Filter Mode */
;;;285      if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
000096  7844              LDRB     r4,[r0,#1]
;;;286      {
;;;287        /*Id/Mask mode for the filter*/
;;;288        CAN->FM1R &= ~(u32)FilterNumber_BitPos;
000098  4a13              LDR      r2,|L6.232|
00009a  2c00              CMP      r4,#0                 ;285
;;;289      }
;;;290      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
;;;291      {
;;;292        /*Identifier list mode for the filter*/
;;;293        CAN->FM1R |= (u32)FilterNumber_BitPos;
00009c  6814              LDR      r4,[r2,#0]
00009e  bf0c              ITE      EQ                    ;288
0000a0  438c              BICEQ    r4,r4,r1              ;288
0000a2  430c              ORRNE    r4,r4,r1
0000a4  6014              STR      r4,[r2,#0]
;;;294      }
;;;295    
;;;296      /* Filter FIFO assignment */
;;;297      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO0)
0000a6  8984              LDRH     r4,[r0,#0xc]
;;;298      {
;;;299        /* FIFO 0 assignation for the filter */
;;;300        CAN->FFA1R &= ~(u32)FilterNumber_BitPos;
0000a8  4a10              LDR      r2,|L6.236|
0000aa  b914              CBNZ     r4,|L6.178|
0000ac  6814              LDR      r4,[r2,#0]
0000ae  438c              BICS     r4,r4,r1
0000b0  6014              STR      r4,[r2,#0]
                  |L6.178|
;;;301      }
;;;302      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO1)
0000b2  8984              LDRH     r4,[r0,#0xc]
0000b4  2c01              CMP      r4,#1
0000b6  d102              BNE      |L6.190|
;;;303      {
;;;304        /* FIFO 1 assignation for the filter */
;;;305        CAN->FFA1R |= (u32)FilterNumber_BitPos;
0000b8  6814              LDR      r4,[r2,#0]
0000ba  430c              ORRS     r4,r4,r1
0000bc  6014              STR      r4,[r2,#0]
                  |L6.190|
;;;306      }
;;;307      
;;;308      /* Filter activation */
;;;309      if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
0000be  7b80              LDRB     r0,[r0,#0xe]
0000c0  2801              CMP      r0,#1
0000c2  d104              BNE      |L6.206|
;;;310      {
;;;311        CAN->FA1R |= FilterNumber_BitPos;
0000c4  f8dc0000          LDR      r0,[r12,#0]
0000c8  4308              ORRS     r0,r0,r1
0000ca  f8cc0000          STR      r0,[r12,#0]
                  |L6.206|
;;;312      }
;;;313    
;;;314      /* Leave the initialisation mode for the filter */
;;;315      CAN->FMR &= ~FMR_FINIT;
0000ce  6818              LDR      r0,[r3,#0]
0000d0  f0200001          BIC      r0,r0,#1
0000d4  6018              STR      r0,[r3,#0]
;;;316    }
0000d6  bc30              POP      {r4,r5}
0000d8  4770              BX       lr
;;;317    
                          ENDP

0000da  0000              DCW      0x0000
                  |L6.220|
                          DCD      0x40006600
                  |L6.224|
                          DCD      0x4000661c
                  |L6.228|
                          DCD      0x4000660c
                  |L6.232|
                          DCD      0x40006604
                  |L6.236|
                          DCD      0x40006614

                          AREA ||i.CAN_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  CAN_GetFlagStatus PROC
;;;720    *******************************************************************************/
;;;721    FlagStatus CAN_GetFlagStatus(u32 CAN_FLAG)
000000  4a03              LDR      r2,|L7.16|
;;;722    {
000002  4601              MOV      r1,r0
;;;723      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;724    
;;;725      /* Check the parameters */
;;;726      assert_param(IS_CAN_FLAG(CAN_FLAG));
;;;727    
;;;728      /* Check the status of the specified CAN flag */
;;;729      if ((CAN->ESR & CAN_FLAG) != (u32)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
;;;730      {
;;;731        /* CAN_FLAG is set */
;;;732        bitstatus = SET;
00000a  bf18              IT       NE
00000c  2001              MOVNE    r0,#1
;;;733      }
;;;734      else
;;;735      {
;;;736        /* CAN_FLAG is reset */
;;;737        bitstatus = RESET;
;;;738      }
;;;739      /* Return the CAN_FLAG status */
;;;740      return  bitstatus;
;;;741    }
00000e  4770              BX       lr
;;;742    
                          ENDP

                  |L7.16|
                          DCD      0x40006418

                          AREA ||i.CAN_GetITStatus||, CODE, READONLY, ALIGN=2

                  CAN_GetITStatus PROC
;;;770    *******************************************************************************/
;;;771    ITStatus CAN_GetITStatus(u32 CAN_IT)
000000  4601              MOV      r1,r0
;;;772    {
;;;773      ITStatus pendingbitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;774    
;;;775      /* Check the parameters */
;;;776      assert_param(IS_CAN_ITStatus(CAN_IT));
;;;777    
;;;778      switch (CAN_IT)
;;;779      {
;;;780        case CAN_IT_RQCP0:
;;;781          pendingbitstatus = CheckITStatus(CAN->TSR, TSR_RQCP0);
;;;782          break;
;;;783        case CAN_IT_RQCP1:
;;;784          pendingbitstatus = CheckITStatus(CAN->TSR, TSR_RQCP1);
;;;785          break;
;;;786        case CAN_IT_RQCP2:
;;;787          pendingbitstatus = CheckITStatus(CAN->TSR, TSR_RQCP2);
;;;788          break;
;;;789        case CAN_IT_FF0:
;;;790          pendingbitstatus = CheckITStatus(CAN->RF0R, RF0R_FULL0);
;;;791          break;
;;;792        case CAN_IT_FOV0:
;;;793          pendingbitstatus = CheckITStatus(CAN->RF0R, RF0R_FOVR0);
;;;794          break;
;;;795        case CAN_IT_FF1:
;;;796          pendingbitstatus = CheckITStatus(CAN->RF1R, RF1R_FULL1);
000004  f8dfc0ec          LDR      r12,|L8.244|
000008  2940              CMP      r1,#0x40              ;778
00000a  d059              BEQ      |L8.192|
00000c  dc1e              BGT      |L8.76|
00000e  4a3a              LDR      r2,|L8.248|
000010  2907              CMP      r1,#7                 ;778
000012  f1020304          ADD      r3,r2,#4              ;790
000016  d041              BEQ      |L8.156|
000018  dc0c              BGT      |L8.52|
00001a  2904              CMP      r1,#4                 ;778
00001c  d044              BEQ      |L8.168|
00001e  2905              CMP      r1,#5                 ;778
000020  d034              BEQ      |L8.140|
000022  2906              CMP      r1,#6                 ;778
;;;797          break;
;;;798        case CAN_IT_FOV1:
;;;799          pendingbitstatus = CheckITStatus(CAN->RF1R, RF1R_FOVR1);
;;;800          break;
;;;801        case CAN_IT_EWG:
;;;802          pendingbitstatus = CheckITStatus(CAN->ESR, ESR_EWGF);
;;;803          break;
;;;804        case CAN_IT_EPV:
;;;805          pendingbitstatus = CheckITStatus(CAN->ESR, ESR_EPVF);
;;;806          break;
;;;807        case CAN_IT_BOF:
;;;808          pendingbitstatus = CheckITStatus(CAN->ESR, ESR_BOFF);
;;;809          break;
;;;810        case CAN_IT_SLK:
;;;811          pendingbitstatus = CheckITStatus(CAN->MSR, MSR_SLAKI);
;;;812          break;
;;;813        case CAN_IT_WKU:
;;;814          pendingbitstatus = CheckITStatus(CAN->MSR, MSR_WKUI);
;;;815          break;
;;;816    
;;;817        default :
;;;818          pendingbitstatus = RESET;
;;;819          break;
;;;820      }
;;;821    
;;;822      /* Return the CAN_IT status */
;;;823      return  pendingbitstatus;
;;;824    }
000024  bf18              IT       NE
000026  4770              BXNE     lr
000028  6811              LDR      r1,[r2,#0]            ;784
00002a  2000              MOVS     r0,#0                 ;784
00002c  f4117f80          TST      r1,#0x100             ;784
000030  d132              BNE      |L8.152|
000032  4770              BX       lr
                  |L8.52|
000034  2908              CMP      r1,#8                 ;778
000036  d03d              BEQ      |L8.180|
000038  2920              CMP      r1,#0x20              ;778
00003a  bf18              IT       NE
00003c  4770              BXNE     lr
00003e  f8dc1000          LDR      r1,[r12,#0]           ;796
000042  2000              MOVS     r0,#0                 ;796
000044  f0110f08          TST      r1,#8                 ;796
000048  d126              BNE      |L8.152|
00004a  4770              BX       lr
                  |L8.76|
00004c  4a2b              LDR      r2,|L8.252|
00004e  f5b16f80          CMP      r1,#0x400             ;778
000052  d042              BEQ      |L8.218|
000054  dc0c              BGT      |L8.112|
000056  f5b17f80          CMP      r1,#0x100             ;778
00005a  d038              BEQ      |L8.206|
00005c  f5b17f00          CMP      r1,#0x200             ;778
000060  bf18              IT       NE
000062  4770              BXNE     lr
000064  6811              LDR      r1,[r2,#0]            ;805
000066  2000              MOVS     r0,#0                 ;805
000068  f0110f02          TST      r1,#2                 ;805
00006c  d114              BNE      |L8.152|
00006e  4770              BX       lr
                  |L8.112|
000070  4a23              LDR      r2,|L8.256|
000072  f5b13f80          CMP      r1,#0x10000           ;778
000076  d036              BEQ      |L8.230|
000078  f5b13f00          CMP      r1,#0x20000           ;778
00007c  bf18              IT       NE
00007e  4770              BXNE     lr
000080  6811              LDR      r1,[r2,#0]            ;811
000082  2000              MOVS     r0,#0                 ;811
000084  f0110f10          TST      r1,#0x10              ;811
000088  d106              BNE      |L8.152|
00008a  4770              BX       lr
                  |L8.140|
00008c  6811              LDR      r1,[r2,#0]            ;781
00008e  2000              MOVS     r0,#0                 ;781
000090  f0110f01          TST      r1,#1                 ;781
000094  bf08              IT       EQ
000096  4770              BXEQ     lr
                  |L8.152|
000098  2001              MOVS     r0,#1
00009a  4770              BX       lr
                  |L8.156|
00009c  6811              LDR      r1,[r2,#0]            ;787
00009e  2000              MOVS     r0,#0                 ;787
0000a0  f4113f80          TST      r1,#0x10000           ;787
0000a4  d1f8              BNE      |L8.152|
0000a6  4770              BX       lr
                  |L8.168|
0000a8  6819              LDR      r1,[r3,#0]            ;790
0000aa  2000              MOVS     r0,#0                 ;790
0000ac  f0110f08          TST      r1,#8                 ;790
0000b0  d1f2              BNE      |L8.152|
0000b2  4770              BX       lr
                  |L8.180|
0000b4  6819              LDR      r1,[r3,#0]            ;793
0000b6  2000              MOVS     r0,#0                 ;793
0000b8  f0110f10          TST      r1,#0x10              ;793
0000bc  d1ec              BNE      |L8.152|
0000be  4770              BX       lr
                  |L8.192|
0000c0  f8dc1000          LDR      r1,[r12,#0]           ;799
0000c4  2000              MOVS     r0,#0                 ;799
0000c6  f0110f10          TST      r1,#0x10              ;799
0000ca  d1e5              BNE      |L8.152|
0000cc  4770              BX       lr
                  |L8.206|
0000ce  6811              LDR      r1,[r2,#0]            ;802
0000d0  2000              MOVS     r0,#0                 ;802
0000d2  f0110f01          TST      r1,#1                 ;802
0000d6  d1df              BNE      |L8.152|
0000d8  4770              BX       lr
                  |L8.218|
0000da  6811              LDR      r1,[r2,#0]            ;808
0000dc  2000              MOVS     r0,#0                 ;808
0000de  f0110f04          TST      r1,#4                 ;808
0000e2  d1d9              BNE      |L8.152|
0000e4  4770              BX       lr
                  |L8.230|
0000e6  6811              LDR      r1,[r2,#0]            ;814
0000e8  2000              MOVS     r0,#0                 ;814
0000ea  f0110f08          TST      r1,#8                 ;814
0000ee  d1d3              BNE      |L8.152|
0000f0  4770              BX       lr
;;;825    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L8.244|
                          DCD      0x40006410
                  |L8.248|
                          DCD      0x40006408
                  |L8.252|
                          DCD      0x40006418
                  |L8.256|
                          DCD      0x40006404

                          AREA ||i.CAN_ITConfig||, CODE, READONLY, ALIGN=2

                  CAN_ITConfig PROC
;;;378    *******************************************************************************/
;;;379    void CAN_ITConfig(u32 CAN_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L9.20|
;;;380    {
;;;381      /* Check the parameters */
;;;382      assert_param(IS_CAN_ITConfig(CAN_IT));
;;;383      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;384    
;;;385      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;386      {
;;;387        /* Enable the selected CAN interrupt */
;;;388        CAN->IER |= CAN_IT;
;;;389      }
;;;390      else
;;;391      {
;;;392        /* Disable the selected CAN interrupt */
;;;393        CAN->IER &= ~CAN_IT;
000004  6811              LDR      r1,[r2,#0]
000006  bf14              ITE      NE                    ;388
000008  4308              ORRNE    r0,r0,r1              ;388
00000a  ea210000          BICEQ    r0,r1,r0
00000e  6010              STR      r0,[r2,#0]            ;388
;;;394      }
;;;395    }
000010  4770              BX       lr
;;;396    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40006414

                          AREA ||i.CAN_Init||, CODE, READONLY, ALIGN=2

                  CAN_Init PROC
;;;105    *******************************************************************************/
;;;106    u8 CAN_Init(CAN_InitTypeDef* CAN_InitStruct)
000000  4931              LDR      r1,|L10.200|
;;;107    {
;;;108      u8 InitStatus = 0;
000002  2200              MOVS     r2,#0
;;;109      u16 WaitAck = 0;
;;;110    
;;;111      /* Check the parameters */
;;;112      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
;;;113      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
;;;114      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
;;;115      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
;;;116      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
;;;117      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
;;;118      assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
;;;119      assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
;;;120      assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
;;;121      assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
;;;122      assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
;;;123    
;;;124      /* Request initialisation */
;;;125      CAN->MCR = MCR_INRQ;
000004  2301              MOVS     r3,#1
000006  600b              STR      r3,[r1,#0]
;;;126    
;;;127      /* ...and check acknowledged */
;;;128      if ((CAN->MSR & MSR_INAK) == 0)
000008  1d0b              ADDS     r3,r1,#4
00000a  f8d3c000          LDR      r12,[r3,#0]
00000e  f01c0f01          TST      r12,#1
000012  d057              BEQ      |L10.196|
;;;129      {
;;;130        InitStatus = CANINITFAILED;
;;;131      }
;;;132      else
;;;133      {
;;;134        /* Set the time triggered communication mode */
;;;135        if (CAN_InitStruct->CAN_TTCM == ENABLE)
000014  7802              LDRB     r2,[r0,#0]
000016  2a01              CMP      r2,#1
;;;136        {
;;;137          CAN->MCR |= MCR_TTCM;
;;;138        }
;;;139        else
;;;140        {
;;;141          CAN->MCR &= ~MCR_TTCM;
000018  680a              LDR      r2,[r1,#0]
00001a  bf0c              ITE      EQ                    ;137
00001c  f0420280          ORREQ    r2,r2,#0x80           ;137
000020  f0220280          BICNE    r2,r2,#0x80
000024  600a              STR      r2,[r1,#0]
;;;142        }
;;;143    
;;;144        /* Set the automatic bus-off management */
;;;145        if (CAN_InitStruct->CAN_ABOM == ENABLE)
000026  7842              LDRB     r2,[r0,#1]
000028  2a01              CMP      r2,#1
;;;146        {
;;;147          CAN->MCR |= MCR_ABOM;
;;;148        }
;;;149        else
;;;150        {
;;;151          CAN->MCR &= ~MCR_ABOM;
00002a  680a              LDR      r2,[r1,#0]
00002c  bf0c              ITE      EQ                    ;147
00002e  f0420240          ORREQ    r2,r2,#0x40           ;147
000032  f0220240          BICNE    r2,r2,#0x40
000036  600a              STR      r2,[r1,#0]
;;;152        }
;;;153    
;;;154        /* Set the automatic wake-up mode */
;;;155        if (CAN_InitStruct->CAN_AWUM == ENABLE)
000038  7882              LDRB     r2,[r0,#2]
00003a  2a01              CMP      r2,#1
;;;156        {
;;;157          CAN->MCR |= MCR_AWUM;
;;;158        }
;;;159        else
;;;160        {
;;;161          CAN->MCR &= ~MCR_AWUM;
00003c  680a              LDR      r2,[r1,#0]
00003e  bf0c              ITE      EQ                    ;157
000040  f0420220          ORREQ    r2,r2,#0x20           ;157
000044  f0220220          BICNE    r2,r2,#0x20
000048  600a              STR      r2,[r1,#0]
;;;162        }
;;;163    
;;;164        /* Set the no automatic retransmission */
;;;165        if (CAN_InitStruct->CAN_NART == ENABLE)
00004a  78c2              LDRB     r2,[r0,#3]
00004c  2a01              CMP      r2,#1
;;;166        {
;;;167          CAN->MCR |= MCR_NART;
;;;168        }
;;;169        else
;;;170        {
;;;171          CAN->MCR &= ~MCR_NART;
00004e  680a              LDR      r2,[r1,#0]
000050  bf0c              ITE      EQ                    ;167
000052  f0420210          ORREQ    r2,r2,#0x10           ;167
000056  f0220210          BICNE    r2,r2,#0x10
00005a  600a              STR      r2,[r1,#0]
;;;172        }
;;;173    
;;;174        /* Set the receive FIFO locked mode */
;;;175        if (CAN_InitStruct->CAN_RFLM == ENABLE)
00005c  7902              LDRB     r2,[r0,#4]
00005e  2a01              CMP      r2,#1
;;;176        {
;;;177          CAN->MCR |= MCR_RFLM;
;;;178        }
;;;179        else
;;;180        {
;;;181          CAN->MCR &= ~MCR_RFLM;
000060  680a              LDR      r2,[r1,#0]
000062  bf0c              ITE      EQ                    ;177
000064  f0420208          ORREQ    r2,r2,#8              ;177
000068  f0220208          BICNE    r2,r2,#8
00006c  600a              STR      r2,[r1,#0]
;;;182        }
;;;183    
;;;184        /* Set the transmit FIFO priority */
;;;185        if (CAN_InitStruct->CAN_TXFP == ENABLE)
00006e  7942              LDRB     r2,[r0,#5]
000070  2a01              CMP      r2,#1
;;;186        {
;;;187          CAN->MCR |= MCR_TXFP;
;;;188        }
;;;189        else
;;;190        {
;;;191          CAN->MCR &= ~MCR_TXFP;
000072  680a              LDR      r2,[r1,#0]
000074  bf0c              ITE      EQ                    ;187
000076  f0420204          ORREQ    r2,r2,#4              ;187
00007a  f0220204          BICNE    r2,r2,#4
00007e  600a              STR      r2,[r1,#0]
;;;192        }
;;;193    
;;;194        /* Set the bit timing register */
;;;195        CAN->BTR = (u32)((u32)CAN_InitStruct->CAN_Mode << 30) | ((u32)CAN_InitStruct->CAN_SJW << 24) |
000080  7982              LDRB     r2,[r0,#6]
000082  f890c007          LDRB     r12,[r0,#7]
000086  0792              LSLS     r2,r2,#30
000088  ea42620c          ORR      r2,r2,r12,LSL #24
00008c  f890c008          LDRB     r12,[r0,#8]
000090  ea42420c          ORR      r2,r2,r12,LSL #16
000094  f890c009          LDRB     r12,[r0,#9]
000098  8940              LDRH     r0,[r0,#0xa]
00009a  ea42520c          ORR      r2,r2,r12,LSL #20
00009e  1e40              SUBS     r0,r0,#1
0000a0  4310              ORRS     r0,r0,r2
0000a2  4a0a              LDR      r2,|L10.204|
0000a4  6010              STR      r0,[r2,#0]
;;;196                   ((u32)CAN_InitStruct->CAN_BS1 << 16) | ((u32)CAN_InitStruct->CAN_BS2 << 20) |
;;;197                   ((u32)CAN_InitStruct->CAN_Prescaler - 1);
;;;198    
;;;199        InitStatus = CANINITOK;
;;;200    
;;;201        /* Request leave initialisation */
;;;202        CAN->MCR &= ~MCR_INRQ;
0000a6  6808              LDR      r0,[r1,#0]
0000a8  2201              MOVS     r2,#1                 ;199
0000aa  f0200001          BIC      r0,r0,#1
0000ae  6008              STR      r0,[r1,#0]
;;;203    
;;;204        /* Wait the acknowledge */
;;;205        for(WaitAck = 0x400; WaitAck > 0x0; WaitAck--)
0000b0  0290              LSLS     r0,r2,#10
                  |L10.178|
0000b2  1e40              SUBS     r0,r0,#1
0000b4  0400              LSLS     r0,r0,#16
0000b6  0c00              LSRS     r0,r0,#16
0000b8  d1fb              BNE      |L10.178|
;;;206        {
;;;207        }
;;;208        
;;;209        /* ...and check acknowledged */
;;;210        if ((CAN->MSR & MSR_INAK) == MSR_INAK)
0000ba  6818              LDR      r0,[r3,#0]
0000bc  f0100f01          TST      r0,#1
;;;211        {
;;;212          InitStatus = CANINITFAILED;
0000c0  bf18              IT       NE
0000c2  2200              MOVNE    r2,#0
                  |L10.196|
;;;213        }
;;;214      }
;;;215    
;;;216      /* At this step, return the status of initialization */
;;;217      return InitStatus;
0000c4  4610              MOV      r0,r2
;;;218    }
0000c6  4770              BX       lr
;;;219    
                          ENDP

                  |L10.200|
                          DCD      0x40006400
                  |L10.204|
                          DCD      0x4000641c

                          AREA ||i.CAN_MessagePending||, CODE, READONLY, ALIGN=2

                  CAN_MessagePending PROC
;;;589    *******************************************************************************/
;;;590    u8 CAN_MessagePending(u8 FIFONumber)
000000  0001              MOVS     r1,r0
;;;591    {
;;;592      u8 MessagePending=0;
000002  f04f0000          MOV      r0,#0
000006  d007              BEQ      |L11.24|
;;;593    
;;;594      /* Check the parameters */
;;;595      assert_param(IS_CAN_FIFO(FIFONumber));
;;;596    
;;;597      if (FIFONumber == CAN_FIFO0)
;;;598      {
;;;599        MessagePending = (u8)(CAN->RF0R&(u32)0x03);
;;;600      }
;;;601      else if (FIFONumber == CAN_FIFO1)
000008  2901              CMP      r1,#1
;;;602      {
;;;603        MessagePending = (u8)(CAN->RF1R&(u32)0x03);
;;;604      }
;;;605      else
;;;606      {
;;;607        MessagePending = 0;
;;;608      }
;;;609      return MessagePending;
;;;610    }
00000a  bf18              IT       NE
00000c  4770              BXNE     lr
00000e  4805              LDR      r0,|L11.36|
000010  6800              LDR      r0,[r0,#0]            ;603
000012  f0000003          AND      r0,r0,#3              ;603
000016  4770              BX       lr
                  |L11.24|
000018  4803              LDR      r0,|L11.40|
00001a  6800              LDR      r0,[r0,#0]            ;599
00001c  f0000003          AND      r0,r0,#3              ;599
000020  4770              BX       lr
;;;611    
                          ENDP

000022  0000              DCW      0x0000
                  |L11.36|
                          DCD      0x40006410
                  |L11.40|
                          DCD      0x4000640c

                          AREA ||i.CAN_Receive||, CODE, READONLY, ALIGN=2

                  CAN_Receive PROC
;;;619    *******************************************************************************/
;;;620    void CAN_Receive(u8 FIFONumber, CanRxMsg* RxMessage)
000000  0102              LSLS     r2,r0,#4
;;;621    {
;;;622      /* Check the parameters */
;;;623      assert_param(IS_CAN_FIFO(FIFONumber));
;;;624    
;;;625      /* Get the Id */
;;;626      RxMessage->IDE = (u8)0x04 & CAN->sFIFOMailBox[FIFONumber].RIR;
000002  f1024280          ADD      r2,r2,#0x40000000
000006  f50242c0          ADD      r2,r2,#0x6000
00000a  f8d235b0          LDR      r3,[r2,#0x5b0]
00000e  f0130304          ANDS     r3,r3,#4
000012  720b              STRB     r3,[r1,#8]
;;;627      if (RxMessage->IDE == CAN_ID_STD)
;;;628      {
;;;629        RxMessage->StdId = (u32)0x000007FF & (CAN->sFIFOMailBox[FIFONumber].RIR >> 21);
;;;630      }
;;;631      else
;;;632      {
;;;633        RxMessage->ExtId = (u32)0x1FFFFFFF & (CAN->sFIFOMailBox[FIFONumber].RIR >> 3);
000014  f8d235b0          LDR      r3,[r2,#0x5b0]
000018  bf07              ITTEE    EQ                    ;629
00001a  0d5b              LSREQ    r3,r3,#21             ;629
00001c  600b              STREQ    r3,[r1,#0]            ;629
00001e  08db              LSRNE    r3,r3,#3
000020  604b              STRNE    r3,[r1,#4]
;;;634      }
;;;635      
;;;636      RxMessage->RTR = (u8)0x02 & CAN->sFIFOMailBox[FIFONumber].RIR;
000022  f8d235b0          LDR      r3,[r2,#0x5b0]
000026  f0030302          AND      r3,r3,#2
00002a  724b              STRB     r3,[r1,#9]
;;;637    
;;;638      /* Get the DLC */
;;;639      RxMessage->DLC = (u8)0x0F & CAN->sFIFOMailBox[FIFONumber].RDTR;
00002c  f8d235b4          LDR      r3,[r2,#0x5b4]
000030  f003030f          AND      r3,r3,#0xf
000034  728b              STRB     r3,[r1,#0xa]
;;;640    
;;;641      /* Get the FMI */
;;;642      RxMessage->FMI = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDTR >> 8);
000036  f8d235b4          LDR      r3,[r2,#0x5b4]
00003a  0a1b              LSRS     r3,r3,#8
00003c  74cb              STRB     r3,[r1,#0x13]
;;;643    
;;;644      /* Get the data field */
;;;645      RxMessage->Data[0] = (u8)0xFF & CAN->sFIFOMailBox[FIFONumber].RDLR;
00003e  f8d235b8          LDR      r3,[r2,#0x5b8]
000042  72cb              STRB     r3,[r1,#0xb]
;;;646      RxMessage->Data[1] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDLR >> 8);
000044  f8d235b8          LDR      r3,[r2,#0x5b8]
000048  0a1b              LSRS     r3,r3,#8
00004a  730b              STRB     r3,[r1,#0xc]
;;;647      RxMessage->Data[2] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDLR >> 16);
00004c  f8d235b8          LDR      r3,[r2,#0x5b8]
000050  0c1b              LSRS     r3,r3,#16
000052  734b              STRB     r3,[r1,#0xd]
;;;648      RxMessage->Data[3] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDLR >> 24);
000054  f8d235b8          LDR      r3,[r2,#0x5b8]
000058  0e1b              LSRS     r3,r3,#24
00005a  738b              STRB     r3,[r1,#0xe]
;;;649    
;;;650      RxMessage->Data[4] = (u8)0xFF & CAN->sFIFOMailBox[FIFONumber].RDHR;
00005c  f8d235bc          LDR      r3,[r2,#0x5bc]
000060  73cb              STRB     r3,[r1,#0xf]
;;;651      RxMessage->Data[5] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDHR >> 8);
000062  f8d235bc          LDR      r3,[r2,#0x5bc]
000066  0a1b              LSRS     r3,r3,#8
000068  740b              STRB     r3,[r1,#0x10]
;;;652      RxMessage->Data[6] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDHR >> 16);
00006a  f8d235bc          LDR      r3,[r2,#0x5bc]
00006e  0c1b              LSRS     r3,r3,#16
000070  744b              STRB     r3,[r1,#0x11]
;;;653      RxMessage->Data[7] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDHR >> 24);
000072  f8d225bc          LDR      r2,[r2,#0x5bc]
000076  0e12              LSRS     r2,r2,#24
000078  748a              STRB     r2,[r1,#0x12]
00007a  2120              MOVS     r1,#0x20
00007c  2800              CMP      r0,#0
00007e  bf0c              ITE      EQ
000080  4801              LDREQ    r0,|L12.136|
000082  4802              LDRNE    r0,|L12.140|
000084  6001              STR      r1,[r0,#0]
;;;654    
;;;655      /* Release the FIFO */
;;;656      CAN_FIFORelease(FIFONumber);
;;;657    }
000086  4770              BX       lr
;;;658    
                          ENDP

                  |L12.136|
                          DCD      0x4000640c
                  |L12.140|
                          DCD      0x40006410

                          AREA ||i.CAN_Sleep||, CODE, READONLY, ALIGN=2

                  CAN_Sleep PROC
;;;665    *******************************************************************************/
;;;666    u8 CAN_Sleep(void)
000000  4905              LDR      r1,|L13.24|
;;;667    {
;;;668      u8 SleepStatus = 0;
;;;669    
;;;670      /* Sleep mode entering request */
;;;671      CAN->MCR |= MCR_SLEEP;
000002  6808              LDR      r0,[r1,#0]
000004  f0400002          ORR      r0,r0,#2
000008  6008              STR      r0,[r1,#0]
;;;672      SleepStatus = CANSLEEPOK;
;;;673    
;;;674      /* Sleep mode status */
;;;675      if ((CAN->MCR&MCR_SLEEP) == 0)
00000a  6809              LDR      r1,[r1,#0]
00000c  2001              MOVS     r0,#1                 ;672
00000e  f0110f02          TST      r1,#2
;;;676      {
;;;677        /* Sleep mode not entered */
;;;678        SleepStatus = CANSLEEPFAILED;
000012  bf08              IT       EQ
000014  2000              MOVEQ    r0,#0
;;;679      }
;;;680    
;;;681      /* At this step, sleep mode status */
;;;682      return SleepStatus;
;;;683    }
000016  4770              BX       lr
;;;684    
                          ENDP

                  |L13.24|
                          DCD      0x40006400

                          AREA ||i.CAN_StructInit||, CODE, READONLY, ALIGN=1

                  CAN_StructInit PROC
;;;325    *******************************************************************************/
;;;326    void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
000000  2100              MOVS     r1,#0
;;;327    {
;;;328      /* Reset CAN init structure parameters values */
;;;329    
;;;330      /* Initialize the time triggered communication mode */
;;;331      CAN_InitStruct->CAN_TTCM = DISABLE;
000002  7001              STRB     r1,[r0,#0]
;;;332    
;;;333      /* Initialize the automatic bus-off management */
;;;334      CAN_InitStruct->CAN_ABOM = DISABLE;
000004  7041              STRB     r1,[r0,#1]
;;;335    
;;;336      /* Initialize the automatic wake-up mode */
;;;337      CAN_InitStruct->CAN_AWUM = DISABLE;
000006  7081              STRB     r1,[r0,#2]
;;;338    
;;;339      /* Initialize the no automatic retransmission */
;;;340      CAN_InitStruct->CAN_NART = DISABLE;
000008  70c1              STRB     r1,[r0,#3]
;;;341    
;;;342      /* Initialize the receive FIFO locked mode */
;;;343      CAN_InitStruct->CAN_RFLM = DISABLE;
00000a  7101              STRB     r1,[r0,#4]
;;;344    
;;;345      /* Initialize the transmit FIFO priority */
;;;346      CAN_InitStruct->CAN_TXFP = DISABLE;
00000c  7141              STRB     r1,[r0,#5]
;;;347    
;;;348      /* Initialize the CAN_Mode member */
;;;349      CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
00000e  7181              STRB     r1,[r0,#6]
;;;350    
;;;351      /* Initialize the CAN_SJW member */
;;;352      CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
000010  71c1              STRB     r1,[r0,#7]
;;;353    
;;;354      /* Initialize the CAN_BS1 member */
;;;355      CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
000012  2103              MOVS     r1,#3
000014  7201              STRB     r1,[r0,#8]
;;;356    
;;;357      /* Initialize the CAN_BS2 member */
;;;358      CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
000016  2102              MOVS     r1,#2
000018  7241              STRB     r1,[r0,#9]
;;;359    
;;;360      /* Initialize the CAN_Prescaler member */
;;;361      CAN_InitStruct->CAN_Prescaler = 1;
00001a  2101              MOVS     r1,#1
00001c  8141              STRH     r1,[r0,#0xa]
;;;362    }
00001e  4770              BX       lr
;;;363    
                          ENDP


                          AREA ||i.CAN_Transmit||, CODE, READONLY, ALIGN=2

                  CAN_Transmit PROC
;;;405    *******************************************************************************/
;;;406    u8 CAN_Transmit(CanTxMsg* TxMessage)
000000  4933              LDR      r1,|L15.208|
;;;407    {
000002  b410              PUSH     {r4}
;;;408      u8 TransmitMailbox = 0;
;;;409    
;;;410      /* Check the parameters */
;;;411      assert_param(IS_CAN_STDID(TxMessage->StdId));
;;;412      assert_param(IS_CAN_EXTID(TxMessage->StdId));
;;;413      assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
;;;414      assert_param(IS_CAN_RTR(TxMessage->RTR));
;;;415      assert_param(IS_CAN_DLC(TxMessage->DLC));
;;;416    
;;;417      /* Select one empty transmit mailbox */
;;;418      if ((CAN->TSR&TSR_TME0) == TSR_TME0)
000004  680b              LDR      r3,[r1,#0]
000006  2200              MOVS     r2,#0                 ;408
000008  f0136f80          TST      r3,#0x4000000
00000c  d045              BEQ      |L15.154|
                  |L15.14|
;;;419      {
;;;420        TransmitMailbox = 0;
;;;421      }
;;;422      else if ((CAN->TSR&TSR_TME1) == TSR_TME1)
;;;423      {
;;;424        TransmitMailbox = 1;
;;;425      }
;;;426      else if ((CAN->TSR&TSR_TME2) == TSR_TME2)
;;;427      {
;;;428        TransmitMailbox = 2;
;;;429      }
;;;430      else
;;;431      {
;;;432        TransmitMailbox = CAN_NO_MB;
;;;433      }
;;;434    
;;;435      if (TransmitMailbox != CAN_NO_MB)
;;;436      {
;;;437        /* Set up the Id */
;;;438        CAN->sTxMailBox[TransmitMailbox].TIR &= TMIDxR_TXRQ;
00000e  0111              LSLS     r1,r2,#4
000010  f1014180          ADD      r1,r1,#0x40000000
000014  f50141c0          ADD      r1,r1,#0x6000
000018  f8d13580          LDR      r3,[r1,#0x580]
00001c  f0030301          AND      r3,r3,#1
000020  f8c13580          STR      r3,[r1,#0x580]
;;;439        if (TxMessage->IDE == CAN_ID_STD)
000024  7a03              LDRB     r3,[r0,#8]
000026  2b00              CMP      r3,#0
000028  d045              BEQ      |L15.182|
;;;440        {
;;;441          TxMessage->StdId &= (u32)0x000007FF;
;;;442          TxMessage->StdId = TxMessage->StdId << 21;
;;;443          
;;;444          CAN->sTxMailBox[TransmitMailbox].TIR |= (TxMessage->StdId | TxMessage->IDE |
;;;445                                                   TxMessage->RTR);
;;;446        }
;;;447        else
;;;448        {
;;;449          TxMessage->ExtId &= (u32)0x1FFFFFFF;
;;;450          TxMessage->ExtId <<= 3;
00002a  f8d0c004          LDR      r12,[r0,#4]
00002e  ea4f0ccc          LSL      r12,r12,#3
;;;451    
;;;452          CAN->sTxMailBox[TransmitMailbox].TIR |= (TxMessage->ExtId | TxMessage->IDE | 
000032  f8c0c004          STR      r12,[r0,#4]
000036  f8d14580          LDR      r4,[r1,#0x580]
00003a  ea440c0c          ORR      r12,r4,r12
00003e  7a44              LDRB     r4,[r0,#9]
000040  4323              ORRS     r3,r3,r4
000042  ea4c0303          ORR      r3,r12,r3
000046  f8c13580          STR      r3,[r1,#0x580]
                  |L15.74|
;;;453                                                   TxMessage->RTR);
;;;454        }
;;;455        
;;;456        /* Set up the DLC */
;;;457        TxMessage->DLC &= (u8)0x0000000F;
00004a  7a83              LDRB     r3,[r0,#0xa]
00004c  f003030f          AND      r3,r3,#0xf
000050  7283              STRB     r3,[r0,#0xa]
;;;458        CAN->sTxMailBox[TransmitMailbox].TDTR &= (u32)0xFFFFFFF0;
000052  f8d13584          LDR      r3,[r1,#0x584]
000056  f023030f          BIC      r3,r3,#0xf
00005a  f8c13584          STR      r3,[r1,#0x584]
;;;459        CAN->sTxMailBox[TransmitMailbox].TDTR |= TxMessage->DLC;
00005e  f8d13584          LDR      r3,[r1,#0x584]
000062  f890c00a          LDRB     r12,[r0,#0xa]
000066  ea43030c          ORR      r3,r3,r12
00006a  f8c13584          STR      r3,[r1,#0x584]
;;;460    
;;;461        /* Set up the data field */
;;;462        CAN->sTxMailBox[TransmitMailbox].TDLR = (((u32)TxMessage->Data[3] << 24) | 
00006e  7ac3              LDRB     r3,[r0,#0xb]
000070  f8d0c00c          LDR      r12,[r0,#0xc]
000074  ea43230c          ORR      r3,r3,r12,LSL #8
000078  f8c13588          STR      r3,[r1,#0x588]
;;;463                                                 ((u32)TxMessage->Data[2] << 16) |
;;;464                                                 ((u32)TxMessage->Data[1] << 8) | 
;;;465                                                 ((u32)TxMessage->Data[0]));
;;;466        CAN->sTxMailBox[TransmitMailbox].TDHR = (((u32)TxMessage->Data[7] << 24) | 
00007c  7bc3              LDRB     r3,[r0,#0xf]
00007e  6900              LDR      r0,[r0,#0x10]
000080  ea432000          ORR      r0,r3,r0,LSL #8
000084  f8c1058c          STR      r0,[r1,#0x58c]
;;;467                                                 ((u32)TxMessage->Data[6] << 16) |
;;;468                                                 ((u32)TxMessage->Data[5] << 8) |
;;;469                                                 ((u32)TxMessage->Data[4]));
;;;470    
;;;471        /* Request transmission */
;;;472        CAN->sTxMailBox[TransmitMailbox].TIR |= TMIDxR_TXRQ;
000088  f8d10580          LDR      r0,[r1,#0x580]
00008c  f0400001          ORR      r0,r0,#1
000090  f8c10580          STR      r0,[r1,#0x580]
                  |L15.148|
;;;473      }
;;;474    
;;;475      return TransmitMailbox;
;;;476    }
000094  bc10              POP      {r4}
000096  4610              MOV      r0,r2                 ;475
000098  4770              BX       lr
                  |L15.154|
00009a  680a              LDR      r2,[r1,#0]            ;422
00009c  f0126f00          TST      r2,#0x8000000         ;422
0000a0  bf18              IT       NE                    ;424
0000a2  2201              MOVNE    r2,#1                 ;424
0000a4  d1b3              BNE      |L15.14|
0000a6  6809              LDR      r1,[r1,#0]            ;426
0000a8  f0115f80          TST      r1,#0x10000000        ;426
0000ac  bf14              ITE      NE                    ;428
0000ae  2202              MOVNE    r2,#2                 ;428
0000b0  2204              MOVEQ    r2,#4                 ;432
0000b2  d1ac              BNE      |L15.14|
0000b4  e7ee              B        |L15.148|
                  |L15.182|
0000b6  8803              LDRH     r3,[r0,#0]            ;441
0000b8  055b              LSLS     r3,r3,#21             ;442
0000ba  6003              STR      r3,[r0,#0]            ;444
0000bc  f8d1c580          LDR      r12,[r1,#0x580]       ;444
0000c0  ea4c0c03          ORR      r12,r12,r3            ;444
0000c4  7a43              LDRB     r3,[r0,#9]            ;444
0000c6  ea4c0303          ORR      r3,r12,r3             ;444
0000ca  f8c13580          STR      r3,[r1,#0x580]        ;444
0000ce  e7bc              B        |L15.74|
;;;477    
                          ENDP

                  |L15.208|
                          DCD      0x40006408

                          AREA ||i.CAN_TransmitStatus||, CODE, READONLY, ALIGN=2

                  CAN_TransmitStatus PROC
;;;486    *******************************************************************************/
;;;487    u8 CAN_TransmitStatus(u8 TransmitMailbox)
000000  4a1e              LDR      r2,|L16.124|
;;;488    {
;;;489      /* RQCP, TXOK and TME bits */
;;;490      u8 State = 0;
000002  2100              MOVS     r1,#0
000004  b120              CBZ      r0,|L16.16|
;;;491    
;;;492      /* Check the parameters */
;;;493      assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
;;;494    
;;;495      switch (TransmitMailbox)
000006  2801              CMP      r0,#1
000008  d00f              BEQ      |L16.42|
00000a  2802              CMP      r0,#2
00000c  d01c              BEQ      |L16.72|
00000e  e029              B        |L16.100|
                  |L16.16|
;;;496      {
;;;497        case (0): State |= (u8)((CAN->TSR & TSR_RQCP0) << 2);
000010  6810              LDR      r0,[r2,#0]
000012  f0000001          AND      r0,r0,#1
000016  ea410080          ORR      r0,r1,r0,LSL #2
;;;498          State |= (u8)((CAN->TSR & TSR_TXOK0) >> 0);
00001a  6811              LDR      r1,[r2,#0]
00001c  f0010102          AND      r1,r1,#2
000020  4308              ORRS     r0,r0,r1
;;;499          State |= (u8)((CAN->TSR & TSR_TME0) >> 26);
000022  6811              LDR      r1,[r2,#0]
000024  f3c16180          UBFX     r1,r1,#26,#1
;;;500          break;
000028  e00c              B        |L16.68|
                  |L16.42|
;;;501        case (1): State |= (u8)((CAN->TSR & TSR_RQCP1) >> 6);
00002a  6810              LDR      r0,[r2,#0]
00002c  f4007080          AND      r0,r0,#0x100
000030  ea411090          ORR      r0,r1,r0,LSR #6
;;;502          State |= (u8)((CAN->TSR & TSR_TXOK1) >> 8);
000034  6811              LDR      r1,[r2,#0]
000036  f4017100          AND      r1,r1,#0x200
00003a  ea402011          ORR      r0,r0,r1,LSR #8
;;;503          State |= (u8)((CAN->TSR & TSR_TME1) >> 27);
00003e  6811              LDR      r1,[r2,#0]
000040  f3c161c0          UBFX     r1,r1,#27,#1
                  |L16.68|
000044  4301              ORRS     r1,r1,r0              ;499
000046  e00d              B        |L16.100|
                  |L16.72|
;;;504          break;
;;;505        case (2): State |= (u8)((CAN->TSR & TSR_RQCP2) >> 14);
000048  6810              LDR      r0,[r2,#0]
00004a  f4003080          AND      r0,r0,#0x10000
00004e  ea413090          ORR      r0,r1,r0,LSR #14
;;;506          State |= (u8)((CAN->TSR & TSR_TXOK2) >> 16);
000052  6811              LDR      r1,[r2,#0]
000054  f4013100          AND      r1,r1,#0x20000
000058  ea404011          ORR      r0,r0,r1,LSR #16
;;;507          State |= (u8)((CAN->TSR & TSR_TME2) >> 28);
00005c  6811              LDR      r1,[r2,#0]
00005e  f3c17100          UBFX     r1,r1,#28,#1
000062  4301              ORRS     r1,r1,r0
                  |L16.100|
;;;508          break;
;;;509        default:
;;;510          State = CANTXFAILED;
;;;511          break;
;;;512      }
;;;513    
;;;514      switch (State)
000064  2900              CMP      r1,#0
;;;515      {
;;;516          /* transmit pending  */
;;;517        case (0x0): State = CANTXPENDING;
000066  bf04              ITT      EQ
000068  2002              MOVEQ    r0,#2
;;;518          break;
;;;519          /* transmit failed  */
;;;520        case (0x5): State = CANTXFAILED;
;;;521          break;
;;;522          /* transmit succedeed  */
;;;523        case (0x7): State = CANTXOK;
;;;524          break;
;;;525        default:
;;;526          State = CANTXFAILED;
;;;527          break;
;;;528      }
;;;529    
;;;530      return State;
;;;531    }
00006a  4770              BXEQ     lr
00006c  2905              CMP      r1,#5                 ;514
00006e  d003              BEQ      |L16.120|
000070  2907              CMP      r1,#7                 ;514
000072  bf04              ITT      EQ                    ;523
000074  2001              MOVEQ    r0,#1                 ;523
000076  4770              BXEQ     lr
                  |L16.120|
000078  2000              MOVS     r0,#0                 ;526
00007a  4770              BX       lr
;;;532    
                          ENDP

                  |L16.124|
                          DCD      0x40006408

                          AREA ||i.CAN_WakeUp||, CODE, READONLY, ALIGN=2

                  CAN_WakeUp PROC
;;;692    *******************************************************************************/
;;;693    u8 CAN_WakeUp(void)
000000  4905              LDR      r1,|L17.24|
;;;694    {
;;;695      u8 WakeUpStatus = 0;
000002  2000              MOVS     r0,#0
;;;696    
;;;697      /* Wake up request */
;;;698      CAN->MCR &= ~MCR_SLEEP;
000004  680a              LDR      r2,[r1,#0]
000006  f0220202          BIC      r2,r2,#2
00000a  600a              STR      r2,[r1,#0]
;;;699      WakeUpStatus = CANWAKEUPFAILED;
;;;700    
;;;701      /* Sleep mode status */
;;;702      if ((CAN->MCR&MCR_SLEEP) == 0)
00000c  6809              LDR      r1,[r1,#0]
00000e  f0110f02          TST      r1,#2
;;;703      {
;;;704        /* Sleep mode exited */
;;;705        WakeUpStatus = CANWAKEUPOK;
000012  bf08              IT       EQ
000014  2001              MOVEQ    r0,#1
;;;706      }
;;;707    
;;;708      /* At this step, sleep mode status */
;;;709      return WakeUpStatus;
;;;710    }
000016  4770              BX       lr
;;;711    
                          ENDP

                  |L17.24|
                          DCD      0x40006400
